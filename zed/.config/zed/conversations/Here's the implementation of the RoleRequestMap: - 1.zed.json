{"id":"a26d9c39-d867-4445-80d4-c121a4b2cf7b","zed":"context","version":"0.4.0","text":"\n\n\n```ts atom-web/src/server/new-structure/domain/permission/entities/role-request.entity.ts\nimport { User } from \"@atom/types\";\nimport { Entity } from \"../../../framework/domain/entity\";\n\nexport enum RoleRequestStatus {\n  PENDING = \"pending\",\n  APPROVED = \"approved\",\n  REJECTED = \"rejected\",\n}\n\nexport type RoleRequestProps = {\n  locationID: number;\n  userID: User.ID;\n  roleID: number;\n  justification: string;\n  status: RoleRequestStatus;\n  createdBy: User.ID;\n  creationTs: Date;\n  responseBy?: User.ID;\n  responseTs?: Date;\n};\n\nexport class RoleRequest extends Entity<RoleRequestProps> {\n  get locationID(): number {\n    return this.props.locationID;\n  }\n\n  get userID(): User.ID {\n    return this.props.userID;\n  }\n\n  get roleID(): number {\n    return this.props.roleID;\n  }\n\n  get justification(): string {\n    return this.props.justification;\n  }\n\n  get status(): RoleRequestStatus {\n    return this.props.status;\n  }\n\n  get createdBy(): User.ID {\n    return this.props.createdBy;\n  }\n\n  get creationTs(): Date {\n    return this.props.creationTs;\n  }\n\n  get responseBy(): User.ID | undefined {\n    return this.props.responseBy;\n  }\n\n  get responseTs(): Date | undefined {\n    return this.props.responseTs;\n  }\n\n  get isPending(): boolean {\n    return this.props.status === RoleRequestStatus.PENDING;\n  }\n\n  get isApproved(): boolean {\n    return this.props.status === RoleRequestStatus.APPROVED;\n  }\n\n  get isRejected(): boolean {\n    return this.props.status === RoleRequestStatus.REJECTED;\n  }\n\n  public approve(reviewerID: User.ID) {\n    this.props.status = RoleRequestStatus.APPROVED;\n    this.props.responseBy = reviewerID;\n    this.props.responseTs = new Date();\n  }\n\n  public reject(reviewerID: User.ID) {\n    this.props.status = RoleRequestStatus.REJECTED;\n    this.props.responseBy = reviewerID;\n    this.props.responseTs = new Date();\n  }\n\n  static create(props: RoleRequestProps, id?: number): RoleRequest {\n    return new RoleRequest(props, id);\n  }\n}\n```\n\n```sql atom-web/db/migrations/V242__AddRoleRequest.sql\n\nCREATE TABLE `user_role_request` (\n  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n  `location_id` INTEGER UNSIGNED NOT NULL,\n\n  `user_id` INT UNSIGNED NOT NULL,\n  `role_id` INT UNSIGNED NOT NULL,\n  `justification` MEDIUMTEXT NOT NULL,\n\n  `status` ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',\n\n  `responded_by` INT UNSIGNED NULL,\n  `response_ts` TIMESTAMP NULL,\n\n  -- created by could be different from the user_id if the request is made by a user on behalf of another\n  `created_by` INT UNSIGNED NOT NULL,\n  `creation_ts` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n\n\n  CONSTRAINT `fk_user_role_request_location_id` FOREIGN KEY (`location_id`) REFERENCES `location`(`location_id`) ON DELETE RESTRICT ON UPDATE CASCADE,\n  CONSTRAINT `fk_user_role_request_role_id` FOREIGN KEY (`role_id`) REFERENCES `role` (`role_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n\n  CONSTRAINT `fk_user_role_request_user_id` FOREIGN KEY (`user_id`) REFERENCES `new_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT `fk_user_role_request_created_by` FOREIGN KEY (`created_by`) REFERENCES `new_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT `fk_user_role_request_responded_by` FOREIGN KEY (`responded_by`) REFERENCES `new_user` (`id`) ON DELETE RESTRICT ON UPDATE CASCADE,\n\n  PRIMARY KEY (`id`)\n);\n```\n\n\ni have the above entity and migration which has the db schema, help me write a mapper for it, following is an example of a mapper for a different entity, i need help writing a mapper for the above entity\n\natom-web/src/server/new-structure/domain/asset/mappers\n```ts atom-web/src/server/new-structure/domain/asset/mappers/asset-part-utility.map.ts\nimport { Prisma } from \"@prisma/client\";\nimport { DBClient } from \"../../../../config/database/client\";\nimport { ExcludeNull } from \"../../../framework/utils\";\nimport { assetPartUtilityQueryInclude } from \"../../../application/repositories/asset.repo\";\nimport { AssetPartUtility } from \"../entities/asset-part-utility.entity\";\nimport { AttributeMap } from \"./attribute.map\";\nimport { PersistedEntity } from \"../../../framework/domain/entity\";\n\nexport type DbAssetPart = ExcludeNull<\n  Prisma.Result<typeof DBClient.asset_part_utility, { include: typeof assetPartUtilityQueryInclude }, \"findFirst\">\n>;\n\nexport class AssetPartUtilityMap {\n  static toDomain(assetPartUtility: DbAssetPart): PersistedEntity<AssetPartUtility> {\n    return AssetPartUtility.create(\n      {\n        utility_value: assetPartUtility.value,\n        attribute: AttributeMap.toDomain(assetPartUtility.attribute),\n      },\n      assetPartUtility.asset_part_id\n    );\n  }\n}\n```\n\n```ts atom-web/src/server/new-structure/domain/asset/mappers/asset-part.map.ts\nimport { Prisma } from \"@prisma/client\";\nimport { DBClient } from \"../../../../config/database/client\";\nimport { ExcludeNull } from \"../../../framework/utils\";\nimport { assetPartQueryInclude } from \"../../../application/repositories/asset.repo\";\nimport { AssetPart } from \"../entities/asset-part.entity\";\nimport { AssetPartUtilityMap } from \"./asset-part-utility.map\";\nimport { PersistedEntity } from \"../../../framework/domain/entity\";\n\nexport type DbAssetPart = ExcludeNull<\n  Prisma.Result<typeof DBClient.asset_part, { include: typeof assetPartQueryInclude }, \"findFirst\">\n>;\n\nexport class AssetPartMap {\n  static toDomain(assetPart: DbAssetPart): PersistedEntity<AssetPart> {\n    return AssetPart.create(\n      {\n        name: assetPart.name,\n        quantity: assetPart.quantity,\n        utility: assetPart.asset_part_utility.map(AssetPartUtilityMap.toDomain),\n      },\n      assetPart.asset_part_id\n    );\n  }\n}\n```\n\n```ts atom-web/src/server/new-structure/domain/asset/mappers/attribute.map.ts\nimport { Prisma } from \"@prisma/client\";\nimport { DBClient } from \"../../../../config/database/client\";\nimport { ExcludeNull } from \"../../../framework/utils\";\nimport { attributeQueryInclude } from \"../../../application/repositories/asset.repo\";\nimport { Attribute } from \"../entities/attribute.entity\";\nimport { PersistedEntity } from \"../../../framework/domain/entity\";\n\nexport type DbAttribute = ExcludeNull<\n  Prisma.Result<typeof DBClient.attribute, { include: typeof attributeQueryInclude }, \"findFirst\">\n>;\n\nexport class AttributeMap {\n  static toDomain(attribute: DbAttribute): PersistedEntity<Attribute> {\n    return Attribute.create(\n      {\n        name: attribute.name,\n        unit_of_measure: attribute.unit_of_measure?.symbol || null,\n      },\n      attribute.attribute_id\n    );\n  }\n}\n```\n\n```ts atom-web/src/server/new-structure/domain/asset/mappers/equipment.map.ts\nimport { Prisma } from \"@prisma/client\";\nimport { DBClient } from \"../../../../config/database/client\";\nimport { ExcludeNull } from \"../../../framework/utils\";\nimport { Equipment } from \"../entities/equipment.entity\";\nimport { assetQueryInclude } from \"../../../application/repositories/asset.repo\";\nimport { AssetPartMap } from \"./asset-part.map\";\nimport { PersistedEntity } from \"../../../framework/domain/entity\";\n\nexport type DbEquipment = ExcludeNull<\n  Prisma.Result<typeof DBClient.asset, { include: typeof assetQueryInclude }, \"findFirst\">\n>;\n\nexport class EquipmentMap {\n  static toDomain(equipment: DbEquipment): PersistedEntity<Equipment> {\n    const equipmentCost = equipment.asset_price?.at(0)?.equipment_cost;\n\n    return Equipment.create(\n      {\n        name: equipment.description,\n        supplier: equipment.warp_supplier?.supplier_name ?? null,\n        type: equipment.asset_type?.asset_type_name ?? null,\n        cost: equipmentCost ? Number(equipmentCost) : null,\n        currency: equipment.location.l360_location?.l360_currency?.name ?? null,\n        assetParts: equipment.asset_part.map(AssetPartMap.toDomain),\n      },\n      equipment.asset_id\n    );\n  }\n}\n```\n\n\n\nI'll create a mapper for your `RoleRequest` entity based on the provided examples. First, let's establish what the mapper should do:\n\n1. Define the database result type\n2. Create the mapping function from DB entity to domain entity\n\nHere's the implementation:\n\n```typescript\n// atom-web/src/server/new-structure/domain/permission/mappers/role-request.map.ts\n\nimport { Prisma } from \"@prisma/client\";\nimport { DBClient } from \"../../../../config/database/client\";\nimport { ExcludeNull } from \"../../../framework/utils\";\nimport { RoleRequest, RoleRequestStatus } from \"../entities/role-request.entity\";\nimport { PersistedEntity } from \"../../../framework/domain/entity\";\n\n// This should be defined in your repo file\nconst roleRequestQueryInclude = {\n  // Include any relations if needed\n} as const;\n\nexport type DbRoleRequest = ExcludeNull<\n  Prisma.Result<typeof DBClient.user_role_request, { include: typeof roleRequestQueryInclude }, \"findFirst\">\n>;\n\nexport class RoleRequestMap {\n  static toDomain(roleRequest: DbRoleRequest): PersistedEntity<RoleRequest> {\n    return RoleRequest.create(\n      {\n        locationID: roleRequest.location_id,\n        userID: roleRequest.user_id,\n        roleID: roleRequest.role_id,\n        justification: roleRequest.justification,\n        status: roleRequest.status as RoleRequestStatus,\n        createdBy: roleRequest.created_by,\n        creationTs: roleRequest.creation_ts,\n        responseBy: roleRequest.responded_by || undefined,\n        responseTs: roleRequest.response_ts || undefined,\n      },\n      roleRequest.id\n    );\n  }\n  \n  static toPersistence(roleRequest: RoleRequest): Omit<Prisma.user_role_requestCreateInput, 'id'> {\n    return {\n      location_id: roleRequest.locationID,\n      user_id: roleRequest.userID,\n      role_id: roleRequest.roleID,\n      justification: roleRequest.justification,\n      status: roleRequest.status,\n      created_by: roleRequest.createdBy,\n      creation_ts: roleRequest.creationTs,\n      responded_by: roleRequest.responseBy || null,\n      response_ts: roleRequest.responseTs || null,\n    };\n  }\n}\n```\n\nIf you need to include related entities in the query or handle more complex mapping, you would need to:\n\n1. Define the appropriate inclusion in your repository\n2. Add the mapping for those relations in this file\n3. Update the type definitions accordingly\n\nAlso, I added a `toPersistence` method that transforms the domain entity back into a format suitable for saving to the database, which is often useful for creating and updating records.\n\nYou'll need to adjust the exact field names based on your Prisma schema if they differ from the SQL column names in the migration.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1387}}},{"id":{"replica_id":0,"value":80},"start":7807,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1388}}},{"id":{"replica_id":0,"value":81},"start":10468,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1389}}}],"summary":"Here's the implementation of the RoleRequestMap:","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":1977},"icon":"File","label":"atom-web/src/server/new-structure/domain/permission/entities/role-request.entity.ts","metadata":{"path":"atom-web/src/server/new-structure/domain/permission/entities/role-request.entity.ts"}},{"range":{"start":1978,"end":3355},"icon":"File","label":"atom-web/db/migrations/V242__AddRoleRequest.sql","metadata":{"path":"atom-web/db/migrations/V242__AddRoleRequest.sql"}},{"range":{"start":3562,"end":7805},"icon":"Folder","label":"atom-web/src/server/new-structure/domain/asset/mappers","metadata":null},{"range":{"start":3617,"end":4651},"icon":"File","label":"atom-web/src/server/new-structure/domain/asset/mappers/asset-part-utility.map.ts","metadata":{"path":"atom-web/src/server/new-structure/domain/asset/mappers/asset-part-utility.map.ts"}},{"range":{"start":4652,"end":5654},"icon":"File","label":"atom-web/src/server/new-structure/domain/asset/mappers/asset-part.map.ts","metadata":{"path":"atom-web/src/server/new-structure/domain/asset/mappers/asset-part.map.ts"}},{"range":{"start":5655,"end":6538},"icon":"File","label":"atom-web/src/server/new-structure/domain/asset/mappers/attribute.map.ts","metadata":{"path":"atom-web/src/server/new-structure/domain/asset/mappers/attribute.map.ts"}},{"range":{"start":6539,"end":7804},"icon":"File","label":"atom-web/src/server/new-structure/domain/asset/mappers/equipment.map.ts","metadata":{"path":"atom-web/src/server/new-structure/domain/asset/mappers/equipment.map.ts"}}]}