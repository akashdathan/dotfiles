{"id":"dd2733a7-8289-4378-97ac-71115af49474","zed":"context","version":"0.4.0","text":"```js atom-web/jest.config.js\n/** @type {import('jest').Config} */\nconst browserTests = {\n  displayName: \"browserTests\",\n  rootDir: \"src/browser\",\n  roots: [\"<rootDir>/test\", \"<rootDir>\"],\n  testMatch: [\"<rootDir>/**/*.test.{js,ts,jsx,tsx}\"],\n  testEnvironment: \"jsdom\",\n  preset: \"ts-jest\",\n\n  transform: {\n    \"^.+\\\\.js$\": [\"babel-jest\", { rootMode: \"upward\" }],\n    \"^.+\\\\.ts?$\": [\"ts-jest\", { tsconfig: \"tsconfig.prod.json\", isolatedModules: true }],\n    \"^.+\\\\.svg$\": \"<rootDir>/test/mocks/svg.js\",\n  },\n  transformIgnorePatterns: [\"node_modules/(?!@tesla/design-system|@tesla/design-system-react|copy-anything|is-what)\"],\n  moduleNameMapper: {\n    \"^~/(.*)$\": \"<rootDir>/$1\",\n    \"\\\\.(css)$\": \"<rootDir>/test/mocks/style.js\",\n    \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\":\n      \"<rootDir>/test/mocks/file.js\",\n    \"^@atom/types/(.*)$\": \"<rootDir>/../../packages/types/src/$1/\",\n  },\n  setupFilesAfterEnv: [\"jest-extended/all\", \"<rootDir>/test/jest.setup.ts\"],\n};\n\nconst serverBase = {\n  rootDir: \"src/server\",\n  testEnvironment: \"node\",\n  preset: \"ts-jest/presets/default-esm\",\n  transform: {\n    \"^.+\\\\.ts?$\": [\"ts-jest\", { tsconfig: \"tsconfig.server.json\", useESM: true, isolatedModules: true }],\n  },\n  moduleNameMapper: {\n    \"^@atom/types/(.*)$\": \"<rootDir>/../../packages/types/src/$1/\",\n  },\n  setupFilesAfterEnv: [\"jest-extended/all\"],\n  prettierPath: null,\n};\n\nconst serverUnitTests = {\n  ...serverBase,\n  displayName: \"serverUnitTests\",\n  roots: [\"<rootDir>\", \"../../packages/library/src\"],\n  testMatch: [\"**/*.unit.test.ts\"],\n  globalSetup: \"<rootDir>/test/unit/globalSetup.ts\",\n  setupFilesAfterEnv: [...serverBase.setupFilesAfterEnv, \"<rootDir>/test/unit/setupAfterEnv.ts\"],\n};\n\nconst serverSystemTests = {\n  ...serverBase,\n  displayName: \"serverSystemTests\",\n  testMatch: [\"<rootDir>/**/*.system.test.ts\", \"<rootDir>/**/system.test.ts\"],\n  globalSetup: \"<rootDir>/test/system/globalSetup.ts\",\n  testEnvironment: \"<rootDir>/test/system/environment.ts\",\n  setupFilesAfterEnv: [...serverBase.setupFilesAfterEnv, \"<rootDir>/test/matchers/jest-extended.ts\"],\n  globalTeardown: \"<rootDir>/test/teardown.ts\",\n};\n\nconst serverLegacyTests = {\n  ...serverBase,\n  displayName: \"serverLegacyTests\",\n  testMatch: [\"<rootDir>/test/index.test.ts\"],\n  setupFiles: [\"<rootDir>/test/mocks.ts\"],\n  globalSetup: \"<rootDir>/test/setup/globalSetup.ts\",\n  globalTeardown: \"<rootDir>/test/teardown.ts\",\n};\n\nmodule.exports = {\n  projects: [browserTests, serverUnitTests, serverSystemTests, serverLegacyTests],\n  collectCoverageFrom: [\n    \"<rootDir>/**/*.{js,jsx,ts,tsx}\",\n    \"!<rootDir>/**/index.ts\",\n    \"!<rootDir>/**/*.repo.ts\",\n    \"!<rootDir>/**/*.controller.ts\",\n    \"!<rootDir>/**/*.swagger.ts\",\n    \"!<rootDir>/**/*.schema.ts\",\n    \"!<rootDir>/**/*.d.ts\",\n    \"!<rootDir>/**/*.test.*\",\n    \"!<rootDir>/**/test/**/*\",\n  ],\n  workerIdleMemoryLimit: \"2048MB\",\n  // reporters: [[\"github-actions\", { silent: false }], \"summary\"],\n};\n```\n\ni have this jest config, how do i use bun instead of jest\n\n# Converting Jest Config to Bun Test Configuration\n\nTo use Bun instead of Jest for testing your project, you'll need to adapt your configuration since Bun has its own test runner that's mostly compatible with Jest.\n\n## Step 1: Create a bunfig.toml file\n\nCreate a `bunfig.toml` file in your project root with the following configuration:\n\n```toml\n[test]\n# Enable coverage reporting\ncoverage = true\n# Use Jest compatibility mode\njest = true\n# Set worker memory limit\nworkerThreads.memoryLimit = \"2048MB\"\n```\n\n## Step 2: Create bun-test.config.js\n\nSince Bun's test runner supports Jest-compatible configuration, create a `bun-test.config.js` file:\n\n```js\nexport default {\n  // Enable Jest compatibility\n  testEnvironment: \"jsdom\",\n  \n  // Apply transforms through presets\n  presets: [\"ts-jest\"],\n  \n  // Handle your moduleNameMapper\n  moduleNameMapper: {\n    \"^~/(.*)$\": \"<rootDir>/src/browser/$1\",\n    \"\\\\.(css)$\": \"<rootDir>/src/browser/test/mocks/style.js\",\n    \"\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\":\n      \"<rootDir>/src/browser/test/mocks/file.js\",\n    \"^@atom/types/(.*)$\": \"<rootDir>/packages/types/src/$1/\",\n  },\n  \n  // Setup files\n  setupFilesAfterEnv: [\n    \"jest-extended/all\", \n    \"<rootDir>/src/browser/test/jest.setup.ts\"\n  ],\n  \n  // Transform patterns\n  transformIgnorePatterns: [\n    \"node_modules/(?!@tesla/design-system|@tesla/design-system-react|copy-anything|is-what)\"\n  ],\n  \n  // Coverage collection\n  collectCoverageFrom: [\n    \"<rootDir>/**/*.{js,jsx,ts,tsx}\",\n    \"!<rootDir>/**/index.ts\",\n    \"!<rootDir>/**/*.repo.ts\",\n    \"!<rootDir>/**/*.controller.ts\", \n    \"!<rootDir>/**/*.swagger.ts\",\n    \"!<rootDir>/**/*.schema.ts\",\n    \"!<rootDir>/**/*.d.ts\",\n    \"!<rootDir>/**/*.test.*\",\n    \"!<rootDir>/**/test/**/*\",\n  ]\n}\n```\n\n## Step 3: Update package.json\n\nUpdate your `package.json` scripts section:\n\n```json\n\"scripts\": {\n  \"test:browser\": \"bun test src/browser\",\n  \"test:server:unit\": \"bun test src/server --test-matcher \\\"**/*.unit.test.ts\\\"\",\n  \"test:server:system\": \"bun test src/server --test-matcher \\\"**/*.system.test.ts\\\" --test-matcher \\\"**/system.test.ts\\\"\",\n  \"test:server:legacy\": \"bun test src/server/test/index.test.ts\",\n  \"test\": \"bun test\"\n}\n```\n\n## Important Notes:\n\n1. Bun's test runner is still evolving but has good Jest compatibility\n2. You may need to adjust some specifics:\n   - Bun handles TypeScript natively, so some of the ts-jest config might be unnecessary\n   - Environment variables may need to be set differently\n   - Some advanced Jest features might need workarounds\n\n3. For environment-specific configurations, you'll use command line arguments when running tests rather than Jest's projects configuration.\n\nTo run your tests with Bun, simply use:\n\n```bash\nbun test\n```\n\nThis is a starting point for migration, and you might need to make additional adjustments as you encounter specific compatibility issues.\njjk\ni am getting jest.mock is not a function error\n\n# Fixing the \"jest.mock is not a function\" Error in Bun Tests\n\nThis error happens because Bun's test runner, while compatible with much of Jest's API, doesn't fully implement all Jest features the same way, including some mocking functionality.\n\n## Three approaches to fix this issue:\n\n### Option 1: Use Bun's native mocking\n\nReplace `jest.mock()` calls with Bun's mocking approach:\n\n```js\n// Instead of:\njest.mock('./path/to/module', () => {\n  return {\n    someFunction: jest.fn()\n  };\n});\n\n// Use:\nimport * as moduleToMock from './path/to/module';\n\n// In your test setup or beforeEach:\nmoduleToMock.someFunction = () => { /* mock implementation */ };\n// or\nglobalThis.mockFunction = () => { /* mock implementation */ };\n```\n\n### Option 2: Create a compatibility layer\n\nAdd a compatibility file (e.g., `jest-compat.js`) that you import in your tests:\n\n```js\n// jest-compat.js\nif (!globalThis.jest) {\n  globalThis.jest = {\n    mock: (modulePath, factory) => {\n      // Simple implementation that might work for basic cases\n      const module = require(modulePath);\n      Object.keys(module).forEach(key => {\n        if (typeof module[key] === 'function') {\n          module[key] = function mockFn(...args) {\n            mockFn.calls = mockFn.calls || [];\n            mockFn.calls.push(args);\n            return undefined;\n          };\n        }\n      });\n    },\n    fn: (impl) => {\n      const mockFn = impl || (() => {});\n      mockFn.mockImplementation = (newImpl) => {\n        Object.assign(mockFn, newImpl);\n        return mockFn;\n      };\n      mockFn.mockReturnValue = (val) => {\n        mockFn.mockImplementation(() => val);\n        return mockFn;\n      };\n      mockFn.mockClear = () => {\n        mockFn.calls = [];\n        return mockFn;\n      };\n      mockFn.calls = [];\n      return mockFn;\n    }\n  };\n}\n```\n\nThen import this at the top of your test files:\n```js\nimport './path/to/jest-compat.js';\n```\n\n### Option 3: Use Jest directly in Bun (Recommended)\n\nSince Bun can run Node.js packages, you can still use Jest directly:\n\n1. Install Jest if not already installed:\n```bash\nbun add -D jest @types/jest\n```\n\n2. Update your package.json scripts:\n```json\n\"scripts\": {\n  \"test\": \"NODE_OPTIONS='--no-warnings' bun jest\"\n}\n```\n\n3. Keep your original Jest configuration.\n\nThis approach uses Bun as the JavaScript runtime but uses Jest's test runner, which ensures full compatibility with Jest features like `jest.mock()`.\n\n## Alternative for Simple Mocks\n\nIf you're using `jest.mock()` for simple module replacements, you can also use Bun's module mocking:\n\n```js\n// In your test file\nimport { mock, unmock } from 'bun:test';\n\n// Mock a module\nmock('./path/to/module', () => {\n  return {\n    someFunction: () => 'mocked result'\n  };\n});\n\n// Test with the mock...\n\n// Unmock when done\nunmock('./path/to/module');\n```\n\nChoose the approach that best fits your project's complexity and mocking needs.\nwhy is the bun test funner saying cannot find variable db. the variable db is defied in the global.d.ts\n# Fixing \"Cannot Find Variable db\" Error in Bun Tests\n\nWhen you're getting a \"cannot find variable db\" error with Bun tests even though `db` is defined in your `global.d.ts` file, the issue is typically related to how TypeScript declarations and runtime environments interact. Here are the most likely causes and solutions:\n\n## 1. TypeScript Declarations vs. Runtime Values\n\nThe `global.d.ts` file only provides type definitions for the TypeScript compiler but doesn't actually create the runtime variables. The definitions are used during compile-time checking but don't exist at runtime unless explicitly created.\n\n### Solution: Initialize the global variable\n\nAdd code that actually creates the `db` object at runtime, before your tests run:\n\n```typescript\n// In a setup file that runs before your tests\nimport { Database } from 'your-database-lib';\n\n// Create the actual global variable\nglobal.db = new Database(/* config */);\n```\n\n## 2. Setup Files Not Being Executed\n\nBun might not be executing your setup files where the global variables are initialized.\n\n### Solution: Ensure setup files run before tests\n\nCreate a setup file if you don't have one already:\n\n```typescript\n// test-setup.ts\nimport { Database } from 'your-database-lib';\n\nglobal.db = new Database(/* config */);\n```\n\nThen make sure Bun runs this setup file:\n\n```bash\nbun test --preload ./test-setup.ts\n```\n\nOr in your bunfig.toml:\n```toml\n[test]\npreload = [\"./test-setup.ts\"]\n```\n\n## 3. Global Scope Issues\n\nBun's test environment might have a different global scope than expected.\n\n### Solution: Use explicit global object\n\n```typescript\n// In your setup file\n(globalThis as any).db = yourDbInstance;\n\n// Or in each test file where you need it\ndeclare const globalThis: {\n  db: YourDbType;\n  [key: string]: any;\n};\n```\n\n## 4. Import the Database in Each Test\n\nIf you can't get global variables working correctly, consider avoiding them:\n\n```typescript\n// In your test files\nimport { db } from '../path/to/db-instance';\n\ntest('my test', () => {\n  // Use db directly\n});\n```\n\n## 5. Check TypeScript Configuration\n\nMake sure your `tsconfig.json` is properly set up for globals:\n\n```json\n{\n  \"compilerOptions\": {\n    \"types\": [\"bun-types\", \"./global.d.ts\"],\n    // Other options...\n  }\n}\n```\n\n## Best Solution for Bun Tests\n\nThe most reliable approach with Bun is to create a setup file that explicitly assigns to `globalThis`:\n\n```typescript\n// setup.ts\nimport { Database } from 'your-database-lib';\n\n// Make TypeScript happy about the assignment\ndeclare global {\n  var db: Database;\n}\n\n// Create the actual runtime variable\nglobalThis.db = new Database(/* config */);\n```\n\nThen run your tests with:\n```bash\nbun test --preload ./setup.ts\n```\n\nThis ensures the variable exists both for TypeScript type checking and at runtime in your tests.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2223}}},{"id":{"replica_id":0,"value":1437},"start":3042,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2224}}},{"id":{"replica_id":0,"value":1438},"start":5960,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2225}}},{"id":{"replica_id":0,"value":1520},"start":6012,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2226}}},{"id":{"replica_id":0,"value":1521},"start":8916,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2227}}},{"id":{"replica_id":0,"value":1639},"start":9020,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2228}}},{"id":{"replica_id":0,"value":1640},"start":11830,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2229}}}],"summary":"Running Server with Bun Instead of Node","slash_command_output_sections":[{"range":{"start":0,"end":2982},"icon":"File","label":"atom-web/jest.config.js","metadata":{"path":"atom-web/jest.config.js"}}]}