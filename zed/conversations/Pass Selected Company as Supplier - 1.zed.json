{"id":"77734d69-e163-483e-9427-018f217516b7","zed":"context","version":"0.4.0","text":"\n\n```tsx atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx\nimport { User } from \"@atom/types\";\nimport { FormLayout, PageTitle } from \"@tesla/design-system-react\";\nimport { Input } from \"@tesla/informed-tds\";\nimport differenceBy from \"lodash/differenceBy\";\nimport React from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { z } from \"zod\";\nimport { BackButton } from \"~/components/shared/ui/BackButton\";\nimport { TypedForm } from \"~/components/shared/ui/form/form\";\nimport { FormFooter } from \"~/components/shared/ui/form/form-footer\";\nimport { Page } from \"~/components/shared/ui/page\";\nimport { toast } from \"~/components/shared/ui/toast\";\nimport { useCreateTeamMutation } from \"../queries\";\nimport { InputSupplierUsers } from \"../shared/input-supplier-users\";\nimport { CompanySelect } from \"~/components/shared/ui/informed-inputs/company-select\";\n\nconst schema = z.object({\n  name: z.string(),\n  company: z.number(),\n  managers: z.array(User.coreSchema).min(1),\n  members: z.array(User.coreSchema),\n});\n\nexport const CreateExternalTeamPage: React.FC = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const locationID = Number(params.locationID);\n  const createTeamMutation = useCreateTeamMutation();\n\n  return (\n    <Page loading={createTeamMutation.isLoading}>\n      <PageTitle text=\"New Team\" top={<BackButton />} />\n\n      <TypedForm\n        schema={schema}\n        onSubmit={(values) => {\n          const members = differenceBy(values.members, values.managers, \"id\").map((user) => ({\n            userID: user.id,\n            isManager: false,\n            areaDisciplines: [],\n          }));\n          const managers = values.managers.map((user) => ({\n            userID: user.id,\n            isManager: true,\n            areaDisciplines: [],\n          }));\n\n          createTeamMutation.mutate(\n            {\n              locationID,\n              name: values.name,\n              members: [...managers, ...members],\n            },\n            {\n              onSuccess: (data) => {\n                toast.success({ header: \"New Team successfully created\" });\n                navigate(`/settings/locations/${locationID}/teams/${data.id}`, { replace: true });\n              },\n            }\n          );\n        }}\n      >\n        <FormLayout className=\"max-w-input\">\n          <Input name=\"name\" label=\"Name\" required />\n          <CompanySelect locationID={locationID} name=\"organisation\" label=\"Organisation\" required excludeTesla />\n          <InputSupplierUsers locationID={locationID} supplierID={} name=\"managers\" label=\"Managers\" required />\n          <InputSupplierUsers locationID={locationID} name=\"members\" label=\"Members\" />\n        </FormLayout>\n        <FormFooter submitLabel=\"Submit\" />\n      </TypedForm>\n    </Page>\n  );\n};\n```\n\ni want to pass the selected company as the supplier in the input supplier users\nI'll help create a patch to pass the selected company ID from the CompanySelect to the InputSupplierUsers components.\n\n<patch>\n<title>Pass selected company as supplierID to InputSupplierUsers</title>\n\n<edit>\n<path>atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx</path>\n<description>Add state to track selected company and pass it to InputSupplierUsers</description>\n<old_text>\n  const locationID = Number(params.locationID);\n  const createTeamMutation = useCreateTeamMutation();\n\n  return (\n</old_text>\n<new_text>\n  const locationID = Number(params.locationID);\n  const createTeamMutation = useCreateTeamMutation();\n  const [selectedCompany, setSelectedCompany] = React.useState<number | undefined>();\n\n  return (\n</new_text>\n</edit>\n\n<edit>\n<path>atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx</path>\n<description>Update CompanySelect to handle company selection and fix the name prop</description>\n<old_text>\n          <CompanySelect locationID={locationID} name=\"organisation\" label=\"Organisation\" required excludeTesla />\n          <InputSupplierUsers locationID={locationID} supplierID={} name=\"managers\" label=\"Managers\" required />\n</old_text>\n<new_text>\n          <CompanySelect \n            locationID={locationID} \n            name=\"company\" \n            label=\"Organisation\" \n            required \n            excludeTesla \n            onChange={(value) => setSelectedCompany(value)}\n          />\n          <InputSupplierUsers locationID={locationID} supplierID={selectedCompany} name=\"managers\" label=\"Managers\" required />\n</new_text>\n</edit>\n\n<edit>\n<path>atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx</path>\n<description>Update the members InputSupplierUsers to also use the selected company</description>\n<old_text>\n          <InputSupplierUsers locationID={locationID} name=\"members\" label=\"Members\" />\n</old_text>\n<new_text>\n          <InputSupplierUsers locationID={locationID} supplierID={selectedCompany} name=\"members\" label=\"Members\" />\n</new_text>\n</edit>\n\n</patch>\nhow to pass form value to an othere item in the form\n\nThere are a few ways to access form values within a form to pass them to other form components. Here's how you can do it using the `useFieldValue` hook from Informed:\n\n```tsx\nimport { useFieldValue } from '@tesla/informed-tds';\n\nexport const CreateExternalTeamPage: React.FC = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const locationID = Number(params.locationID);\n  const createTeamMutation = useCreateTeamMutation();\n  \n  // Get the company value from the form\n  const companyValue = useFieldValue('company');\n\n  return (\n    <Page loading={createTeamMutation.isLoading}>\n      <PageTitle text=\"New Team\" top={<BackButton />} />\n\n      <TypedForm\n        schema={schema}\n        onSubmit={(values) => {\n          // ...\n        }}\n      >\n        <FormLayout className=\"max-w-input\">\n          <Input name=\"name\" label=\"Name\" required />\n          <CompanySelect \n            locationID={locationID} \n            name=\"company\" \n            label=\"Organisation\" \n            required \n            excludeTesla \n          />\n          <InputSupplierUsers \n            locationID={locationID} \n            supplierID={companyValue} \n            name=\"managers\" \n            label=\"Managers\" \n            required \n          />\n          <InputSupplierUsers \n            locationID={locationID} \n            supplierID={companyValue} \n            name=\"members\" \n            label=\"Members\" \n          />\n        </FormLayout>\n        <FormFooter submitLabel=\"Submit\" />\n      </TypedForm>\n    </Page>\n  );\n};\n```\n\nThe `useFieldValue` hook will automatically update whenever the form field value changes, causing the dependent components to re-render with the new value.\n\nAlternatively, if you need to do something more complex or need to access multiple form values, you can use `useFormApi`:\n\n```tsx\nimport { useFormApi } from '@tesla/informed-tds';\n\nexport const CreateExternalTeamPage: React.FC = () => {\n  // ...\n  const formApi = useFormApi();\n  const companyValue = formApi.getValue('company');\n  \n  // Or to get multiple values:\n  const { company, name } = formApi.getValues();\n  \n  // ...\n};\n```\n\nBoth approaches will give you access to the current form values that you can pass to other components within the form.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":350}}},{"id":{"replica_id":0,"value":252},"start":2946,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":351}}},{"id":{"replica_id":0,"value":253},"start":5119,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":352}}},{"id":{"replica_id":0,"value":302},"start":5173,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":353}}},{"id":{"replica_id":0,"value":303},"start":7429,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":354}}}],"summary":"Pass Selected Company as Supplier","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":2,"end":2865},"icon":"File","label":"atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx","metadata":{"path":"atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx"}}],"thought_process_output_sections":[]}