{"id":"6d1d38e8-4693-44a5-a285-71f40bbe5e26","zed":"context","version":"0.4.0","text":"\n\n\n```ts atom-web/src/server/new-structure/application/use-cases/scope/get/system.test.ts\nimport {\n  ScopePoTestContext,\n  setupScopePoTestContext,\n  teardownScopePoTestContext,\n} from \"../../../../../scope/scope-po.test.context\";\nimport { Scope as ScopeType, Project, User } from \"@atom/types\";\nimport { Scope } from \"../../../../../scope/scope.test.utils\";\nimport { AttachmentMock } from \"../../../../../test/mocks/types/attachment\";\nimport { ReqCreateRequestInstanceMock } from \"../../request/instance/test/test.utils\";\nimport {\n  RequestInstanceTestContext,\n  setupRequestInstanceTestContext,\n  teardownRequestInstanceTestContext,\n} from \"../../request/instance/test/test.context\";\n\ndescribe(\"Get Scope\", () => {\n  let ctx: ScopePoTestContext;\n  let requestInstanceCtx: RequestInstanceTestContext;\n  let scopeID: number;\n  let requestID: number;\n  let supplierScopeID: number;\n  let teamManagerID: User.ID;\n  let projectID: number;\n  let attachmentID: string;\n\n  beforeAll(async () => {\n    ctx = await setupScopePoTestContext();\n    requestInstanceCtx = await setupRequestInstanceTestContext();\n\n    const { l360_trt_id, location_id } = ctx;\n\n    teamManagerID = (await db.user.create({ l360_trt_id }, { roles: [\"Project Manager\"], location_id })).user_id;\n    const teamWithStakeholdersInProjectID = (\n      await ctx.admin.team.create(ctx.location_id, {\n        name: \"Team selected in project\",\n        members: [\n          { userID: teamManagerID, isManager: true, areaDisciplines: [] },\n          { userID: ctx.user_id, isManager: false, areaDisciplines: [] },\n        ],\n      })\n    ).id;\n    const teamWithStakeholderInProject = await ctx.admin.team.get(ctx.location_id, teamWithStakeholdersInProjectID);\n\n    attachmentID = (\n      await db.attachment.create(\n        AttachmentMock({ created_by: ctx.user_id, attachment_id: \"4dcd43a8-0050-46c1-959c-9e43eb74e1c3\" })\n      )\n    ).attachment_id;\n\n    requestID = (\n      await ctx.admin.requestInstance.createRequestInstance(ReqCreateRequestInstanceMock(requestInstanceCtx))\n    ).requestID;\n\n    projectID = (\n      await ctx.admin.project.create({\n        title: \"Test Project Title\",\n        location_id: ctx.location_id,\n        budget_code_ids: [],\n        stakeholders: [\n          {\n            stakeholder_type_id: Project.StakeholderType.TeslaResponsiblePerson,\n            user_id: ctx.user_id,\n          },\n          {\n            team_member_id: teamWithStakeholderInProject.members[0].id,\n          },\n          {\n            team_member_id: teamWithStakeholderInProject.members[1].id,\n          },\n        ],\n      })\n    ).project_id;\n\n    scopeID = (\n      await ctx.admin.scope.create(\n        Scope(\n          {\n            ...ctx,\n            selected_reviewer_ids: ctx.selected_reviewer_ids,\n          },\n          {\n            title: \"Test Scope Title\",\n            description: \"Test Scope\",\n            design_change_notice: \"Test DCN\",\n            request_id: requestID,\n\n            access_date: new Date().toISOString(),\n            award_need_date: new Date().toISOString(),\n            completion_date: new Date().toISOString(),\n\n            // Finance fields\n            spend_amount: 1000,\n            spend_review_date: new Date().toISOString(),\n            compensation_id: 1,\n            spend_type_ids: [1],\n            spend_category_id: 1,\n            competitiveness_id: 1,\n            purchase_order: {\n              purchase_order_id: ctx.po1_id,\n              purchase_order_line_ids: [ctx.po1Line1_id],\n            },\n\n            attachments: [\n              {\n                id: attachmentID,\n                description: \"scope attachment\",\n              },\n            ],\n            project_id: projectID,\n          }\n        )\n      )\n    ).scope_id;\n\n    supplierScopeID = (\n      await ctx.admin.scope.create(\n        Scope(ctx, {\n          purchase_order: {\n            supplier_id: ctx.supplier_id,\n          },\n        })\n      )\n    ).scope_id;\n  });\n\n  afterAll(async () => {\n    await db.scope.delete(scopeID);\n    await db.scope.delete(supplierScopeID);\n    await db.project.delete(projectID);\n    await db.requestInstance.delete(requestID);\n    await db.attachment.delete(attachmentID);\n    await db.user.delete(teamManagerID);\n\n    await teardownRequestInstanceTestContext(requestInstanceCtx);\n    await teardownScopePoTestContext(ctx);\n  });\n\n  describe(\"get scope\", () => {\n    let scope: ScopeType.ResGet;\n    let supplierScope: ScopeType.ResGet;\n\n    beforeEach(async () => {\n      scope = await ctx.admin.scope.get(scopeID, ctx.location_id);\n      supplierScope = await ctx.admin.scope.get(supplierScopeID, ctx.location_id);\n      console.log(JSON.stringify(scope, null, 2));\n      console.log(JSON.stringify(supplierScopeID, null, 2));\n    });\n\n    it(\"should have the correct ID\", () => {\n      expect(scope.id).toBe(scopeID);\n    });\n\n    it(\"should have basic scope properties\", () => {\n      expect(scope.title).toBe(\"Test Scope Title\");\n      expect(scope.description).toBe(\"Test Scope\");\n      expect(scope.priority).toBe(\"undetermined\");\n      expect(scope.decisionChangeNotice).toBe(\"Test DCN\");\n      expect(scope.supplierUserCount).toBe(0);\n    });\n\n    it(\"should have creation and updation data\", () => {\n      expect(scope.createdBy.id).toBeDefined();\n      expect(scope.createdBy.email).toString();\n      expect(scope.createdBy.name).toString();\n\n      expect(scope.updatedBy?.id).toBeDefined();\n      expect(scope.updatedBy?.email).toString();\n      expect(scope.updatedBy?.name).toString();\n\n      expect(scope.creationTs).toBeDefined();\n      expect(typeof scope.creationTs).toBe(\"string\");\n      expect(new Date(scope.creationTs).toString()).not.toBe(\"Invalid Date\");\n    });\n\n    it(\"should have correct project information\", () => {\n      expect(scope.project).toBeDefined();\n      expect(scope.project?.id).toBe(projectID);\n      expect(scope.project?.title).toBe(\"Test Project Title\");\n    });\n\n    it(\"should have stakeholders information\", () => {\n      expect(scope.stakeholders).toBeArray();\n\n      const hasRequiredStakeholders =\n        scope.stakeholders?.some((s) => s?.type === \"tesla_responsible_person\") &&\n        scope.stakeholders?.some((s) => s?.type === \"buyer\");\n\n      expect(hasRequiredStakeholders).toBeTrue();\n    });\n\n    it(\"should have location and area information\", () => {\n      expect(scope.location).toBeDefined();\n      expect(scope.location.id).toBe(ctx.location_id);\n      expect(scope.location.name).toBeString();\n      expect(scope.location.description).toBeString();\n      expect(scope.location.currency).toBe(\"USD\");\n\n      expect(scope.location.warpEntities.length).toBePositive();\n      expect(\n        scope.location.warpEntities?.map((entity) => {\n          expect(entity.id).toBeDefined();\n          expect(entity.name).toBeString();\n          expect(entity.code).toBeDefined();\n        })\n      );\n    });\n\n    it(\"should have location and area information\", () => {\n      expect(scope.area).toBeDefined();\n      expect(scope.area?.id).toBeDefined();\n      expect(scope.area?.name).toBeString();\n      expect(scope.area?.abbreviation).toBeDefined();\n    });\n\n    it(\"should have finance information\", () => {\n      expect(scope.finance).toBeDefined();\n\n      const scopeFinance = scope.finance!;\n      expect(scopeFinance.spendAmount).toBeDefined();\n\n      expect(scopeFinance.spendReviewDate).toBeDefined();\n      expect(typeof scopeFinance.spendReviewDate).toBe(\"string\");\n      expect(new Date(scopeFinance.spendReviewDate!).toString()).not.toBe(\"Invalid Date\");\n\n      expect(scopeFinance.compensation?.id).toBeNumber();\n      expect(scopeFinance.compensation?.name).toBeString();\n\n      expect(scopeFinance.spendCategory?.id).toBeNumber();\n      expect(scopeFinance.spendCategory?.category).toBeString();\n\n      expect(scopeFinance.competitiveness?.id).toBeNumber();\n      expect(scopeFinance.competitiveness?.name).toBeString();\n      expect(scopeFinance.competitiveness?.class).toBeString();\n\n      expect(scopeFinance.spendTypes.length).toBePositive();\n      expect(\n        scopeFinance.spendTypes?.map((spendType) => {\n          expect(spendType.id).toBeDefined();\n          expect(spendType.type).toBeString();\n        })\n      );\n\n      expect(scopeFinance.warpPurchaseOrders?.length).toBePositive();\n      expect(\n        scopeFinance.warpPurchaseOrders?.map((po) => {\n          expect(po.id).toBeDefined();\n          expect(po.totalAmountOrdered).toBeNumber();\n          expect(po.connectedPOLinesAmountOrdered).toBeNumber();\n\n          expect(po.connectedPOLines?.length).toBePositive();\n        })\n      );\n\n      const poLine = scopeFinance.warpPurchaseOrders?.[0].connectedPOLines?.[0];\n      expect(poLine).toBeDefined();\n      expect(poLine?.purchaseORderLineID).toBeNumber();\n      expect(poLine?.lineNumber).toBeNumber();\n      expect(poLine?.orderQuantity).toBeNumber();\n      expect(poLine?.unitPrice).toBeNumber();\n      expect(poLine?.totalAmountOrdered).toBeNumber();\n      expect(poLine?.shortText).toBeString();\n    });\n\n    it(\"should have correct attachment information\", () => {\n      expect(scope.attachments?.at(0)).toBeDefined();\n\n      const attachment = scope.attachments!.at(0)!;\n\n      expect(attachment.id).toBeDefined();\n      expect(attachment.filename).toBeString();\n      expect(attachment.extension).toBeString();\n      expect(attachment.description).toBeString();\n    });\n\n    it(\"should have correct supplier information\", () => {\n      expect(supplierScope.suppliers?.at(0)).toBeDefined();\n\n      const supplier = supplierScope.suppliers!.at(0)!;\n\n      expect(supplier.id).toBeDefined();\n      expect(supplier.name).toBeString();\n      expect(supplier.code).toBeString();\n      expect(supplier.locationSuppliers).toBeDefined();\n\n      const locationSupplier = supplier.locationSuppliers!.at(0)!;\n      expect(locationSupplier.isActive).toBeBoolean();\n      expect(locationSupplier.company.id).toBeNumber();\n      expect(locationSupplier.company.name).toBeString();\n      expect(locationSupplier.company.code).toBeString();\n    });\n\n    it(\"should have correct discipline information\", () => {\n      expect(scope.disciplines?.at(0)).toBeDefined();\n\n      const discipline = scope.disciplines!.at(0)!;\n\n      expect(discipline.id).toBeDefined();\n      expect(discipline.name).toBeString();\n      expect(discipline.type).toBeString();\n      expect(discipline.abbreviation).toBeString();\n    });\n\n    it(\"should have correct request information\", () => {\n      expect(scope?.request).toBeDefined();\n      expect(scope?.request?.id).toBeNumber();\n      expect(scope?.request?.title).toBeString();\n      expect(scope?.request?.typePrefix).toBeString();\n    });\n\n    it(\"should have correct milestone information\", () => {\n      expect(scope.milestones.completionDate).toBeDefined();\n      expect(new Date(scope.milestones.completionDate!).toString()).not.toBe(\"Invalid Date\");\n\n      expect(scope.milestones.awardNeedDate).toBeDefined();\n      expect(new Date(scope.milestones.awardNeedDate!).toString()).not.toBe(\"Invalid Date\");\n\n      expect(scope.milestones.accessDate).toBeDefined();\n      expect(new Date(scope.milestones.accessDate!).toString()).not.toBe(\"Invalid Date\");\n    });\n\n    it(\"should have correct rationale information\", () => {\n      expect(scope.rationale.id).toBeNumber();\n      expect(scope.rationale.name).toBeString();\n      expect(scope.rationale.type).toBeString();\n    });\n\n    it(\"should have correct review template information\", () => {\n      expect(scope.reviewTemplate.id).toBeNumber();\n      expect(scope.reviewTemplate.name).toBeString();\n    });\n\n    it(\"should have correct action information\", () => {\n      expect(scope.actions).toBeDefined();\n      expect(scope.actions).toMatchObject({\n        canRequestReview: expect.any(Boolean),\n        canCancelReview: expect.any(Boolean),\n        canReview: expect.any(Boolean),\n        canComplete: expect.any(Boolean),\n        canRelease: expect.any(Boolean),\n        canRevoke: expect.any(Boolean),\n        canCancel: expect.any(Boolean),\n        canArchive: expect.any(Boolean),\n        canUpdate: expect.any(Boolean),\n        canUpdatePurchaseOrder: expect.any(Boolean),\n        canUpdateReviewTemplate: expect.any(Boolean),\n        canUpdateReviewers: expect.any(Boolean),\n      });\n    });\n\n    it(\"should have correct status information\", () => {\n      expect(scope.status).toBeDefined();\n      expect(scope.status.currentStatus).toBeDefined();\n      expect(scope.status.currentStatus?.id).toBeNumber();\n      expect(scope.status.currentStatus?.type).toBeString();\n      expect(scope.status.currentStatus?.typeDisplayName).toBeString();\n\n      expect(scope.status.history).toBeArray();\n      expect(scope.status.history.length).toBeGreaterThanOrEqual(0);\n\n      const historyItem = scope.status.history[0];\n\n      expect(historyItem.id).toBeNumber();\n      expect(historyItem.type).toBeString();\n      expect(historyItem.typeDisplayName).toBeString();\n      expect(historyItem.createdBy).toBeNumber();\n      expect(historyItem.creationTs).toBeString();\n      expect(new Date(historyItem.creationTs).toString()).not.toBe(\"Invalid Date\");\n    });\n  });\n});\n```\n\nhelp me refact this test\nHere's a refactored version of the test with better organization and readability:\n\n```typescript\ndescribe(\"Get Scope\", () => {\n  let ctx: ScopePoTestContext;\n  let requestInstanceCtx: RequestInstanceTestContext;\n  let testData: {\n    scopeID: number;\n    requestID: number;\n    supplierScopeID: number;\n    teamManagerID: User.ID;\n    projectID: number;\n    attachmentID: string;\n  };\n\n  // Helper function to create test data\n  const setupTestData = async () => {\n    const { l360_trt_id, location_id, user_id } = ctx;\n\n    // Create team manager and team\n    const teamManager = await createTeamManager(l360_trt_id, location_id);\n    const team = await createTeamWithStakeholders(teamManager.user_id, user_id);\n\n    // Create test resources\n    const attachment = await createAttachment(user_id);\n    const request = await createRequestInstance();\n    const project = await createProject(team, user_id);\n    const scope = await createMainScope(request.requestID, project.project_id, attachment.attachment_id);\n    const supplierScope = await createSupplierScope();\n\n    return {\n      scopeID: scope.scope_id,\n      requestID: request.requestID,\n      supplierScopeID: supplierScope.scope_id,\n      teamManagerID: teamManager.user_id,\n      projectID: project.project_id,\n      attachmentID: attachment.attachment_id,\n    };\n  };\n\n  beforeAll(async () => {\n    ctx = await setupScopePoTestContext();\n    requestInstanceCtx = await setupRequestInstanceTestContext();\n    testData = await setupTestData();\n  });\n\n  afterAll(async () => {\n    await cleanupTestData(testData);\n    await teardownRequestInstanceTestContext(requestInstanceCtx);\n    await teardownScopePoTestContext(ctx);\n  });\n\n  describe(\"get scope\", () => {\n    let scope: ScopeType.ResGet;\n    let supplierScope: ScopeType.ResGet;\n\n    beforeEach(async () => {\n      scope = await ctx.admin.scope.get(testData.scopeID, ctx.location_id);\n      supplierScope = await ctx.admin.scope.get(testData.supplierScopeID, ctx.location_id);\n    });\n\n    describe(\"Basic Properties\", () => {\n      it(\"should have correct ID and basic properties\", () => {\n        expect(scope.id).toBe(testData.scopeID);\n        expect(scope).toMatchObject({\n          title: \"Test Scope Title\",\n          description: \"Test Scope\",\n          priority: \"undetermined\",\n          decisionChangeNotice: \"Test DCN\",\n          supplierUserCount: 0,\n        });\n      });\n\n      it(\"should have valid creation and update metadata\", () => {\n        verifyUserMetadata(scope.createdBy);\n        verifyUserMetadata(scope.updatedBy);\n        expect(isValidDate(scope.creationTs)).toBeTrue();\n      });\n    });\n\n    describe(\"Related Entities\", () => {\n      it(\"should have correct project information\", () => {\n        expect(scope.project).toMatchObject({\n          id: testData.projectID,\n          title: \"Test Project Title\",\n        });\n      });\n\n      it(\"should have required stakeholders\", () => {\n        verifyStakeholders(scope.stakeholders);\n      });\n\n      it(\"should have valid location and area information\", () => {\n        verifyLocationInfo(scope.location, ctx.location_id);\n        verifyAreaInfo(scope.area);\n      });\n    });\n\n    describe(\"Finance Information\", () => {\n      it(\"should have complete finance details\", () => {\n        verifyFinanceInformation(scope.finance);\n      });\n    });\n\n    // ... Additional test groups for other aspects\n\n    // Helper functions for verification\n    const verifyUserMetadata = (user: any) => {\n      expect(user?.id).toBeDefined();\n      expect(user?.email).toBeString();\n      expect(user?.name).toBeString();\n    };\n\n    const verifyStakeholders = (stakeholders: any[]) => {\n      expect(stakeholders).toBeArray();\n      expect(\n        stakeholders?.some((s) => s?.type === \"tesla_responsible_person\") &&\n        stakeholders?.some((s) => s?.type === \"buyer\")\n      ).toBeTrue();\n    };\n\n    // ... Additional verification helper functions\n  });\n});\n\n// Helper functions for setup\nconst createTeamManager = async (l360_trt_id: string, location_id: number) => {\n  return await db.user.create(\n    { l360_trt_id },\n    { roles: [\"Project Manager\"], location_id }\n  );\n};\n\nconst createAttachment = async (user_id: number) => {\n  return await db.attachment.create(\n    AttachmentMock({\n      created_by: user_id,\n      attachment_id: \"4dcd43a8-0050-46c1-959c-9e43eb74e1c3\"\n    })\n  );\n};\n\n// ... Additional helper functions for creating test resources\n\nconst cleanupTestData = async (testData: any) => {\n  const {\n    scopeID,\n    supplierScopeID,\n    projectID,\n    requestID,\n    attachmentID,\n    teamManagerID\n  } = testData;\n\n  await Promise.all([\n    db.scope.delete(scopeID),\n    db.scope.delete(supplierScopeID),\n    db.project.delete(projectID),\n    db.requestInstance.delete(requestID),\n    db.attachment.delete(attachmentID),\n    db.user.delete(teamManagerID),\n  ]);\n};\n```\n\nKey improvements in this refactored version:\n\n1. **Better Organization**: Tests are grouped into logical sections using nested `describe` blocks.\n\n2. **Separation of Concerns**: Setup and cleanup logic is moved to separate helper functions.\n\n3. **Data Management**: Test data is consolidated into a single object for better management.\n\n4. **Helper Functions**: Verification logic is extracted into reusable helper functions.\n\n5. **Improved Readability**: Related tests are grouped together with clear descriptions.\n\n6. **Better Error Isolation**: Each test focuses on verifying specific aspects of the scope.\n\n7. **Reduced Duplication**: Common verification logic is consolidated into helper functions.\n\nTo complete the refactoring, you would need to:\n\n1. Implement the remaining helper functions for creating test resources\n2. Add the remaining verification helper functions\n3. Group the remaining tests into appropriate describe blocks\n4. Consider adding more specific error cases and edge cases\n\nThis structure makes the tests more maintainable, easier to understand, and easier to modify in the future.","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":515}}},{"id":{"replica_id":0,"value":435},"start":13211,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":516}}}],"summary":"Refactoring Scope Test Structure","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":13185},"icon":"File","label":"atom-web/src/server/new-structure/application/use-cases/scope/get/system.test.ts","metadata":{"path":"atom-web/src/server/new-structure/application/use-cases/scope/get/system.test.ts"}}]}