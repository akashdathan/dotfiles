{"id":"f255d51d-55df-46df-9cd1-0deaf8bd9c0e","zed":"context","version":"0.4.0","text":"\n\n\n```ts atom-web/src/browser/components/settings/queries.ts\nimport { ClientDTO, Company, DocumentDiscipline, LeadReviewFlowTemplate, RequestTypeType, User } from \"@atom/types\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\n\nimport produce from \"immer\";\nimport { locationsAPI, permissionsAPI, usersAPI } from \"~/api\";\nimport { settingsAPI } from \"~/api/settings\";\nimport { ID, Payload } from \"~/api/types\";\nimport {\n  Area,\n  CreateScopeReviewTemplateInput,\n  EditScopeReviewTemplateInput,\n  GetScopeReviewTemplateInput,\n  LocationDiscipline,\n} from \"~/api/types/location\";\n\nimport { GetPermissionsInput } from \"~/api/types/permission\";\nimport { LocationAreasEntity } from \"~/domain/location-areas.entity\";\nimport { queryClient } from \"~/providers/NetworkProvider\";\nimport { companiesAPI } from \"../../api/settings/company\";\nimport { toast } from \"../shared/ui/toast\";\n\ninterface L360_LocationsInput {\n  page: number;\n  pageSize: number;\n  regions?: string[];\n  functions?: string[];\n  statuses?: string[];\n  name?: string;\n}\n\ninterface AreaInput {\n  locationID: number;\n  areaID: number;\n}\n\nexport const queryKey = {\n  env: () => [\"settings\", \"env\"],\n  settingsRefData: () => [\"settings\", \"refData\"],\n  users: (input?: User.ReqGetUsersSchema) => [\"settings\", \"users\", input].filter(Boolean),\n  userPermissions: (locationID?: ID, input?: GetPermissionsInput) =>\n    [\"settings\", \"usersPermissions\", String(locationID), input].filter(Boolean),\n  locations: (filters?: Payload) => [\"settings\", \"locations\", filters].filter(Boolean),\n  locationsRefData: () => [\"settings\", \"locations\", \"refData\"],\n  basicRefData: () => [\"settings\", \"basicRefData\"],\n\n  location: (locationID: ID) => [\"settings\", \"locations\", String(locationID)],\n  locationAreas: (locationID: ID) => [\"settings\", \"locations\", String(locationID), \"areas\"],\n  locationDisciplines: (locationID: ID) => [\"settings\", \"locations\", String(locationID), \"disciplines\"],\n  locationLevels: (locationID: ID) => [\"settings\", \"locations\", String(locationID), \"levels\"],\n  locationScopeReviewers: (locationID: ID) => [\"settings\", \"locations\", String(locationID), \"locationScopeReviewers\"],\n\n  L360_Locations: (filters: Payload) => [\"settings\", \"L360_Locations\", filters],\n  L360_LocationsRefData: () => [\"settings\", \"L360_Locations\", \"refData\"],\n\n  locationScopeReviewTemplates: (locationID: number) => [\n    \"settings\",\n    \"locations\",\n    String(locationID),\n    \"scopeReviewTemplates\",\n  ],\n  locationScopeReviewTemplate: (input: GetScopeReviewTemplateInput) => [\n    \"settings\",\n    \"locations\",\n    String(input.locationID),\n    \"scopeReviewTemplates\",\n    String(input.templateID),\n  ],\n  locationScopeReviewTemplateRefData: (locationID: number) => [\n    \"settings\",\n    \"locations\",\n    String(locationID),\n    \"scopeReviewTemplateRefData\",\n  ],\n\n  listDisciplines: () => [\"settings\", \"disciplines\"],\n  listRequestTypes: (locationID?: number) => [\"settings\", \"requestTypes\", locationID].filter(Boolean),\n  requestType: (id: number) => [\"settings\", \"requestTypes\", \"details\", id],\n  locationLeadReviewTemplates: (locationID: number) => [\n    \"settings\",\n    \"locations\",\n    String(locationID),\n    \"leadReviewTemplates\",\n  ],\n  locationLeadReviewTemplate: (locationID: number, templateID: number) => [\n    \"settings\",\n    \"locations\",\n    String(locationID),\n    \"leadReviewTemplates\",\n    String(templateID),\n  ],\n  companies: ({ locationID, ...filters }: { locationID: number; filters?: Omit<Company.ReqList, \"locationID\"> }) =>\n    [String(locationID), \"companies\", filters].filter(Boolean),\n  companyUsers: ({\n    locationID,\n    companyID,\n    ...filters\n  }: {\n    locationID: number;\n    companyID: number;\n    filters?: Omit<Company.ReqList, \"locationID\">;\n  }) => [String(locationID), \"companies\", companyID, \"users\", filters].filter(Boolean),\n};\n\nexport const useCompaniesQuery = (input: ClientDTO<Company.ReqList>) =>\n  useQuery({\n    queryKey: queryKey.companies(input),\n    queryFn: () => companiesAPI.list(input),\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  });\n\nexport const useCompanyUsersQuery = (input: ClientDTO<Company.ReqListUsers>) =>\n  useQuery({\n    queryKey: queryKey.companyUsers(input),\n    queryFn: () => companiesAPI.listUsers(input),\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n    enabled: !!input.companyID,\n  });\n\nexport const useEnvQuery = () =>\n  useQuery({ queryKey: queryKey.env(), queryFn: settingsAPI.getEnv, staleTime: Infinity, refetchOnWindowFocus: false });\n\nexport const useL360_LocationsQuery = ({ page, pageSize, regions, functions, statuses, name }: L360_LocationsInput) => {\n  const offset = (page - 1) * pageSize;\n\n  return useQuery({\n    queryKey: queryKey.L360_Locations({\n      take: pageSize,\n      skip: offset,\n      name,\n      regions,\n      statuses,\n      functions,\n    }),\n    keepPreviousData: true,\n    queryFn: () =>\n      locationsAPI.getL360Locations({\n        take: pageSize,\n        skip: offset,\n        name,\n        regions,\n        statuses,\n        functions,\n      }),\n  });\n};\n\nexport const useL360_LocationsRefData = () =>\n  useQuery({\n    queryKey: queryKey.L360_LocationsRefData(),\n    queryFn: locationsAPI.getL360LocationsRefData,\n    staleTime: 5 * 60 * 1000,\n  });\n\nexport const useSettingsRefData = () => {\n  return useQuery({\n    queryKey: queryKey.settingsRefData(),\n    queryFn: settingsAPI.getRefData,\n    staleTime: 5 * 60 * 1000,\n  });\n};\n\nexport const useUsersQuery = (input: User.ReqGetUsersSchema) => {\n  return useQuery({\n    queryKey: queryKey.users(input),\n    queryFn: () => usersAPI.getUsers(input),\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useExternalUsersQuery = (input: User.ReqGetUsersSchema) => {\n  return useQuery({\n    queryKey: queryKey.users(input),\n    queryFn: () => usersAPI.getUsers(input),\n    keepPreviousData: true,\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useUsersPermissionsQuery = (locationID: number, input: GetPermissionsInput) => {\n  return useQuery({\n    queryKey: queryKey.userPermissions(locationID, input),\n    queryFn: () => permissionsAPI.getPermissions(locationID, input),\n    keepPreviousData: true,\n  });\n};\n\nexport const useLocations = ({ page, pageSize, regions, functions, statuses, name }: L360_LocationsInput) => {\n  const offset = (page - 1) * pageSize;\n\n  return useQuery({\n    queryKey: queryKey.locations({\n      take: pageSize,\n      skip: offset,\n      name,\n      regions,\n      functions,\n      statuses,\n    }),\n    keepPreviousData: true,\n    queryFn: () =>\n      locationsAPI.getLocations({\n        take: pageSize,\n        skip: offset,\n        name,\n        regions,\n        functions,\n        statuses,\n      }),\n  });\n};\n\nexport const useLocationsRefData = () =>\n  useQuery({\n    queryKey: queryKey.locationsRefData(),\n    queryFn: () => locationsAPI.getLocationsRefData(),\n    staleTime: 5 * 60 * 1000,\n  });\n\nexport const useBasicRefData = () =>\n  useQuery({\n    queryKey: queryKey.basicRefData(),\n    queryFn: () => locationsAPI.getBasicRefData(),\n  });\n\nexport const useLocation = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.location(locationID),\n    queryFn: () => locationsAPI.getLocation(locationID),\n    enabled: !!locationID,\n  });\n};\n\nexport const useLocationAreas = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationAreas(locationID),\n    queryFn: () => locationsAPI.getAreas(locationID),\n    enabled: !!locationID,\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useLocationAreasFlat = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationAreas(locationID),\n    queryFn: () => locationsAPI.getAreas(locationID),\n    enabled: !!locationID,\n    refetchOnWindowFocus: false,\n    select: (data) => {\n      const areas: { id: number; name: string; abbreviation: string; level: number }[] = [];\n\n      function traverse(current: Area, level: number) {\n        areas.push({\n          id: current.area_id,\n          name: current.area_name,\n          level: level,\n          abbreviation: current.abbreviation,\n        });\n\n        if (current.children) {\n          current.children.forEach((child) => traverse(child, level + 1));\n        }\n      }\n\n      data.forEach((area) => traverse(area, 0));\n\n      return areas;\n    },\n  });\n};\n\nexport const useLocationDisciplineSettings = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationDisciplines(locationID),\n    queryFn: () => locationsAPI.getDisciplines(locationID),\n  });\n};\n\nexport const useLocationDisciplines = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationDisciplines(locationID),\n    queryFn: () => locationsAPI.getDisciplines(locationID),\n    select: (data) => data?.filter(({ enabled }) => enabled).map(({ discipline }) => discipline),\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useLocationLevels = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationLevels(locationID),\n    queryFn: () => locationsAPI.getLevels(locationID),\n    enabled: !!locationID,\n  });\n};\n\nexport const useLocationArea = (locationID: number, areaID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationAreas(locationID),\n    queryFn: () => locationsAPI.getAreas(locationID),\n    enabled: !!locationID && !!areaID,\n    select: (areas) => {\n      const areasEntity = new LocationAreasEntity(areas);\n\n      return areasEntity.findArea(areaID);\n    },\n  });\n};\n\nexport const useLocationScopeReviewTemplates = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationScopeReviewTemplates(locationID),\n    queryFn: () => locationsAPI.getScopeReviewTemplates(locationID),\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useScopeReviewTemplate = (input: GetScopeReviewTemplateInput) => {\n  return useQuery({\n    queryKey: queryKey.locationScopeReviewTemplate(input),\n    queryFn: () => locationsAPI.getScopeReviewTemplate(input),\n  });\n};\n\nexport const useCreateScopeReviewTemplateMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: CreateScopeReviewTemplateInput) => locationsAPI.createScopeReviewTemplate(input),\n    onSuccess: (_, input) => {\n      queryClient.invalidateQueries(queryKey.locationScopeReviewTemplates(input.locationID));\n    },\n  });\n};\n\nexport const useEditScopeReviewTemplateMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: EditScopeReviewTemplateInput) => locationsAPI.editScopeReviewTemplate(input),\n    onSuccess: (_, input) => {\n      queryClient.invalidateQueries(queryKey.locationScopeReviewTemplates(input.locationID));\n    },\n  });\n};\n\nexport const useEditLocationMutation = (locationID: number) => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (variables: {\n      name?: string;\n      description?: string;\n      l360_location_id?: number;\n      warp_entity_ids?: number[];\n    }) => locationsAPI.editLocation(locationID, variables),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.locations());\n    },\n  });\n};\n\nexport const useCreateLocationMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (variables: {\n      name: string;\n      description: string;\n      l360_location_id: number;\n      warp_entity_ids: number[];\n    }) => locationsAPI.createLocation(variables),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.locations());\n    },\n  });\n};\n\nexport const useCreateAreaMutation = (locationID: number) => {\n  return useMutation({\n    mutationFn: (variables: {\n      area_name: string;\n      abbreviation: string;\n      area_category_id: number;\n      parent_area_id?: number;\n    }) => locationsAPI.createArea(locationID, variables),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.locationAreas(locationID));\n    },\n  });\n};\n\nexport const useUpdateAreaMutation = ({ locationID, areaID }: AreaInput) => {\n  return useMutation({\n    mutationFn: (variables: { area_name: string; abbreviation: string; area_category_id: number }) =>\n      locationsAPI.updateArea({ locationID, areaID }, variables),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.locationAreas(locationID));\n    },\n  });\n};\n\nexport const useUpdateLocationDisciplineMutation = (locationID: number) =>\n  useMutation({\n    mutationFn: ({ disciplineID, enable }: { disciplineID: number; enable: boolean }) => {\n      if (enable) {\n        return locationsAPI.enableLocationDiscipline(locationID, disciplineID);\n      }\n      return locationsAPI.disableLocationDiscipline(locationID, disciplineID);\n    },\n    onMutate: ({ disciplineID, enable }) => {\n      // Optimistic update\n      queryClient.setQueryData<LocationDiscipline[]>(queryKey.locationDisciplines(locationID), (cached) =>\n        produce(cached, (draft) => {\n          if (!draft) return;\n\n          const discipline = draft.find(({ discipline }) => discipline.discipline_id === disciplineID);\n\n          if (!discipline) throw new Error(\"Discipline not found in cache\");\n\n          discipline.enabled = enable;\n        })\n      );\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.locationDisciplines(locationID));\n      queryClient.invalidateQueries(queryKey.locationScopeReviewers(locationID));\n    },\n  });\n\nexport const useLocationScopeReviewTemplateRefData = (locationID: number) =>\n  useQuery({\n    queryKey: queryKey.locationScopeReviewTemplateRefData(locationID),\n    queryFn: () => locationsAPI.getScopeReviewTemplateRefData(locationID),\n  });\n\nexport const useDeleteLocationScopeReviewerTemplateMutation = (locationID: number, templateID: number) =>\n  useMutation({\n    mutationFn: () => locationsAPI.deleteScopeReviewerTemplate(locationID, templateID),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.location(locationID));\n      toast.success({\n        header: \"Scope Reviewer Template deleted\",\n      });\n    },\n    onError: (error) => toast.error({ header: (error as Error).message }),\n  });\n\nexport const useListDisciplinesQuery = () =>\n  useQuery({\n    queryFn: () => settingsAPI.listDisciplines(),\n    queryKey: queryKey.listDisciplines(),\n  });\n\nexport const useCreateDisciplineMutation = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (input: DocumentDiscipline.CreateReq) => settingsAPI.createDiscipline(input),\n    onSuccess: () => queryClient.invalidateQueries({ predicate: ({ queryKey }) => queryKey.includes(\"disciplines\") }),\n  });\n};\n\nexport const useEditDisciplineMutation = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: (input: DocumentDiscipline.UpdateReq) => settingsAPI.editDiscipline(input),\n    onSuccess: () => queryClient.invalidateQueries({ predicate: ({ queryKey }) => queryKey.includes(\"disciplines\") }),\n  });\n};\n\nexport const useCreateRequestTypeMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: RequestTypeType.CreateReq) => locationsAPI.createRequestType(input),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.listRequestTypes());\n    },\n  });\n};\n\nexport const useRequestTypeList = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.listRequestTypes(locationID),\n    queryFn: () => locationsAPI.listRequestTypes(locationID),\n  });\n};\n\nexport const useRequestType = (locationID: number, requestTypeID: number) => {\n  return useQuery({\n    queryKey: queryKey.requestType(requestTypeID),\n    queryFn: () => locationsAPI.getRequestType(locationID, requestTypeID),\n  });\n};\n\nexport const useUpdateRequestTypeMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: locationsAPI.updateRequestType,\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.listRequestTypes());\n    },\n  });\n};\n\nexport const useUpdateRequestTypeProcessMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: locationsAPI.updateRequestTypeProcess,\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.listRequestTypes());\n    },\n  });\n};\n\nexport const useUpdateRequestTypeFormMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: locationsAPI.updateRequestTypeForm,\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.listRequestTypes());\n    },\n  });\n};\n\nexport const useUpdateRequestTypeAreaManagersMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: locationsAPI.updateRequestTypeAreaManagers,\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.listRequestTypes());\n    },\n  });\n};\n\nexport const useUserSettings = () => {\n  return useQuery({\n    queryKey: [\"userSettings\"],\n    queryFn: usersAPI.getUserSettings,\n    staleTime: Infinity,\n    refetchOnWindowFocus: false,\n  });\n};\n\nexport const useUpdateUserSettingsMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: usersAPI.updateUserSettings,\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.listRequestTypes());\n    },\n  });\n};\n\nexport const useLocationLeadReviewTemplates = (locationID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationLeadReviewTemplates(locationID),\n    queryFn: () => locationsAPI.getLeadReviewTemplates(locationID),\n  });\n};\n\nexport const useCreateLocationLeadReviewTemplateMutation = (locationID: number) => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: LeadReviewFlowTemplate.CreateReq) => locationsAPI.createLeadReviewTemplate(locationID, input),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.locationLeadReviewTemplates(locationID));\n    },\n  });\n};\n\nexport const useLocationLeadReviewTemplate = (locationID: number, templateID: number) => {\n  return useQuery({\n    queryKey: queryKey.locationLeadReviewTemplate(locationID, templateID),\n    queryFn: () => locationsAPI.getLeadReviewTemplateByID(locationID, templateID),\n  });\n};\n\nexport const useUpdateLocationLeadReviewTemplateMutation = (locationID: number, templateID: number) => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: LeadReviewFlowTemplate.UpdateReq) =>\n      locationsAPI.updateLeadReviewTemplate(locationID, templateID, input),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.locationLeadReviewTemplates(locationID));\n    },\n  });\n};\n\nexport const useDuplicateRequestTypeMutation = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: RequestTypeType.DuplicateReq) => locationsAPI.duplicateRequestType(input),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.listRequestTypes());\n    },\n  });\n};\n\nexport const useCreateCompanyWithSuppliersMutation = (locationID: number) => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (input: Company.ReqCreateBody) => companiesAPI.create({ locationID, ...input }),\n    onSuccess: () => {\n      queryClient.invalidateQueries(queryKey.companies({ locationID }));\n      toast.success({\n        header: `Company with suppliers created successfully`,\n        body: `The supplier remains inactive until a scope has been assigned`,\n      });\n    },\n    onError: (error) => {\n      toast.error({\n        header: \"Failed to create company with supplier\",\n        body: (error as Error).message,\n      });\n    },\n  });\n};\n```\n\nif i clear companes using the cpmpany query key without any filters, will it clear the company users also\n\nNo, clearing the companies query key without filters won't automatically clear the company users queries. Looking at your `queryKey` definitions:\n\n```typescript\nqueryKey: {\n  companies: ({ locationID, ...filters }) => \n    [String(locationID), \"companies\", filters].filter(Boolean),\n  companyUsers: ({locationID, companyID, ...filters }) => \n    [String(locationID), \"companies\", companyID, \"users\", filters].filter(Boolean),\n}\n```\n\nThese are separate query keys with different structures. The company users query includes additional segments in its key (`companyID` and `\"users\"`).\n\nIf you want to invalidate both companies and their users data, you would need to either:\n\n1. Invalidate both queries explicitly:\n```typescript\nqueryClient.invalidateQueries(queryKey.companies({ locationID }));\nqueryClient.invalidateQueries(queryKey.companyUsers({ locationID, companyID }));\n```\n\n2. Or use a more generic invalidation that matches both patterns:\n```typescript\nqueryClient.invalidateQueries([String(locationID), \"companies\"]);\n```\n\nThis second approach would invalidate both companies and company users queries since they both start with `[locationID, \"companies\"]`.\nif i dont pass the fillters to the company key, it becomes a generic pattern ","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":169}}},{"id":{"replica_id":0,"value":110},"start":19804,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":170}}},{"id":{"replica_id":0,"value":111},"start":20970,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":171}}}],"summary":"Query Cache Clearing Dependencies Check","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":19696},"icon":"File","label":"atom-web/src/browser/components/settings/queries.ts","metadata":{"path":"atom-web/src/browser/components/settings/queries.ts"}}],"thought_process_output_sections":[]}