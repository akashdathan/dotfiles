{"id":"1dc08fde-cbc0-422b-8fba-de92c01390b9","zed":"context","version":"0.4.0","text":"\n\n\n```tsx atom-web/src/browser/features/documents/create-package/create-package-generic.test.tsx\nimport React from \"react\";\n\nimport type { Document, DocumentNumberingScheme } from \"@atom/types\";\nimport { DocumentFieldType } from \"@atom/types\";\nimport { createFileInMemory, mockFileUpload, mockUseFilePicker } from \"~/test/mocks/files/file\";\nimport { mockUseGetDocumentNumberingScheme } from \"~/test/mocks/queries/settings/locations/document-numbering-scheme\";\nimport { FormRefDataMock } from \"~/test/mocks/types/document\";\nimport { DocumentNumberingSchemeMock } from \"~/test/mocks/types/location\";\nimport { render, screen, withAuth, withModal, withQuery, withRouting, withUserSettings } from \"~/test/rtl\";\nimport { userEvent } from \"~/test/user-event\";\nimport { mockUseListLocationMetadata } from \"../../../test/mocks/queries/settings/locations/document-metadata\";\nimport { fillDocumentTableMetadata } from \"../test/utils\";\nimport { CreatePackageGeneric } from \"./create-package-generic\";\n\njest.mock(\"~/components/shared/pdf-viewer\", () => ({ PDFViewer: () => <div></div> }));\njest.mock(\"~/features/documents/preview-document-modal\", () => ({\n  PreviewDocumentModal: () => <div></div>,\n}));\njest.mock(\"~/components/settings/locations/location/document-numbering/queries\");\njest.mock(\"~/components/settings/locations/location/document-metadata/queries\");\njest.mock(\"~/features/documents/use-file-picker\");\njest.mock(\"~/api/files\");\njest.mock(\"~/api/document-directory.ts\", () => ({\n  documentDirectoryAPI: {\n    getDocumentsByDocumentNumber: async () => ({ documents: [{}] }),\n  },\n}));\n\nconst decorators = [withModal(), withQuery(), withUserSettings(), withRouting(), withAuth({ isAuthorized: true })];\n\ndescribe(\"CreateGenericPackage\", () => {\n  let refData: Document.ResRefData;\n  let getRedirectURL: (packageID: number) => string;\n  let createMutationMock: jest.Mock;\n  let mockedFileID: string;\n\n  beforeAll(() => {\n    jest.resetAllMocks();\n    refData = FormRefDataMock();\n    getRedirectURL = () => \"/\";\n    mockedFileID = \"1-1-1-1\";\n    mockUseListLocationMetadata();\n  });\n\n  beforeEach(() => {\n    createMutationMock = jest.fn().mockResolvedValue({ documents: [{ id: 1 }] });\n  });\n\n  it(\"navigates back on cancel\", async () => {\n    mockUseGetDocumentNumberingScheme(\n      DocumentNumberingSchemeMock({\n        id: 1,\n        numberingFormat: [{ schemeID: 1, documentFieldTypeID: 9, fieldKey: DocumentFieldType.Type.TYPE }],\n      })\n    );\n    render(\n      <CreatePackageGeneric refData={refData} createMutation={createMutationMock} getRedirectURL={getRedirectURL} />,\n      ...decorators\n    );\n\n    await userEvent.click(screen.get(\"button\", \"cancel\"));\n\n    expect(screen.get(\"main\", \"previous\")).toBeInTheDocument();\n  });\n\n  it(\"creates a package with 1 document\", async () => {\n    mockUseGetDocumentNumberingScheme(\n      DocumentNumberingSchemeMock({\n        id: 1,\n        numberingFormat: [\n          { schemeID: 1, documentFieldTypeID: 9, fieldKey: DocumentFieldType.Type.TYPE },\n          { schemeID: 1, documentFieldTypeID: 10, fieldKey: DocumentFieldType.Type.DISCIPLINE },\n        ],\n      })\n    );\n    mockUseFilePicker();\n    mockFileUpload();\n\n    render(\n      <CreatePackageGeneric refData={refData} createMutation={createMutationMock} getRedirectURL={getRedirectURL} />,\n      ...decorators\n    );\n    await userEvent.type(screen.getByLabelText(\"package-title\"), \"Title 1\");\n    await userEvent.clearAndPaste(screen.get(\"textbox\", \"Description\"), \"Description 1\");\n    await userEvent.selectOption(\"type\", \"Document Package Type 2\");\n    await userEvent.click(screen.get(\"button\", \"Next\"));\n\n    await userEvent.click(screen.get(\"button\", \"Add File\"));\n\n    await fillDocumentTableMetadata();\n\n    await userEvent.click(screen.getByRole(\"button\", { name: \"Submit\" }));\n\n    expect(createMutationMock).toHaveBeenCalledWith({\n      name: \"Title 1\",\n      description: \"Description 1\",\n      typeID: refData.docPackageTypes[1].id,\n      documents: [\n        {\n          title: \"title\",\n          revision: \"1\",\n          number: \"title\",\n          fileID: mockedFileID,\n          typeID: 1,\n          locationDocumentPurposeID: 1,\n          notes: \"\",\n          disciplineID: 1,\n          siteID: 1,\n          buildingID: 2,\n          areaID: 4,\n          areaDetailID: undefined,\n          levelID: 1,\n          reference: undefined,\n          reviewFlowTemplateID: undefined,\n          additionalAreaIDs: undefined,\n          csiDivisionIDs: undefined,\n          locationProgramIDs: undefined,\n          permit: undefined,\n          subcontractor: undefined,\n          submittal: {\n            categoryID: undefined,\n            detailID: undefined,\n            typeID: undefined,\n          },\n        },\n      ],\n    });\n  });\n\n  it(\"creates a package with prefilled metadata\", async () => {\n    const numberingFormat: DocumentNumberingScheme.DocumentNumberingSegment[] = [\n      {\n        schemeID: 2,\n        documentFieldTypeID: 20,\n        fieldKey: DocumentFieldType.Type.FREE_TEXT,\n      },\n      { schemeID: 2, documentFieldTypeID: 1, fieldKey: DocumentFieldType.Type.SITE },\n      {\n        schemeID: 2,\n        documentFieldTypeID: 2,\n        fieldKey: DocumentFieldType.Type.BUILDING,\n      },\n      { schemeID: 2, documentFieldTypeID: 3, fieldKey: DocumentFieldType.Type.AREA },\n      { schemeID: 2, documentFieldTypeID: 4, fieldKey: DocumentFieldType.Type.LEVEL },\n      { schemeID: 2, documentFieldTypeID: 9, fieldKey: DocumentFieldType.Type.TYPE },\n      {\n        schemeID: 2,\n        documentFieldTypeID: 5,\n        fieldKey: DocumentFieldType.Type.DISCIPLINE,\n      },\n      {\n        schemeID: 2,\n        documentFieldTypeID: 13,\n        fieldKey: DocumentFieldType.Type.ORIGINATING_ORGANIZATION,\n      },\n      {\n        schemeID: 2,\n        documentFieldTypeID: 6,\n        fieldKey: DocumentFieldType.Type.SEQUENCE_NUMBER,\n      },\n    ];\n    mockUseGetDocumentNumberingScheme(DocumentNumberingSchemeMock({ id: 2, numberingFormat }));\n    const documentNumber = \"BER-GF-B2-A4-L1-DT3-D1-TSLA-16\";\n    mockUseFilePicker(\n      createFileInMemory({\n        name: `${documentNumber}[1] - title.pdf`,\n        lastModified: \"2024-09-01\",\n        size: 1024,\n      })\n    );\n    render(\n      <CreatePackageGeneric refData={refData} createMutation={createMutationMock} getRedirectURL={getRedirectURL} />,\n      ...decorators\n    );\n    await userEvent.type(screen.getByLabelText(\"package-title\"), \"Title 1\");\n    await userEvent.selectOption(\"type\", \"Document Package Type 2\");\n    await userEvent.clearAndPaste(screen.get(\"textbox\", \"Description\"), \"Description 1\");\n    await userEvent.click(screen.get(\"button\", \"Next\"));\n\n    await userEvent.click(screen.get(\"button\", \"Add File\"));\n    await fillDocumentTableMetadata({ isPrefilled: true });\n    await userEvent.click(screen.getByRole(\"button\", { name: \"Submit\" }));\n\n    expect(createMutationMock).toHaveBeenCalledWith({\n      name: \"Title 1\",\n      typeID: refData.docPackageTypes[1].id,\n      description: \"Description 1\",\n      documents: [\n        {\n          number: documentNumber,\n          title: \"title\",\n          revision: \"1\",\n          fileID: mockedFileID,\n          typeID: 3,\n          locationDocumentPurposeID: 1,\n          notes: \"\",\n          disciplineID: 1,\n          siteID: 1,\n          buildingID: 2,\n          areaID: 4,\n          areaDetailID: undefined,\n          levelID: 1,\n          reference: undefined,\n          reviewFlowTemplateID: undefined,\n          additionalAreaIDs: undefined,\n          csiDivisionIDs: undefined,\n          locationProgramIDs: undefined,\n          permit: undefined,\n          subcontractor: undefined,\n          submittal: {\n            categoryID: undefined,\n            detailID: undefined,\n            typeID: undefined,\n          },\n        },\n      ],\n    });\n  });\n});\n```\n\ni am getting the error\n\n\n    TestingLibraryElementError: Unable to find an accessible element with the role \"listbox\" and name `/type/i`\n\n    Here are the accessible roles:\n\n      main:\nThis error occurs because the `userEvent.selectOption()` is looking for a listbox element with a name matching \"type\" but can't find it. The issue might be with how the select/dropdown component is implemented or how you're trying to interact with it.\n\nHere are a few ways to fix this:\n\n1. If you're using a standard HTML select element, try using `getByRole()`:\n\n```typescript\nawait userEvent.selectOptions(screen.getByRole('combobox', { name: /type/i }), \"Document Package Type 2\");\n```\n\n2. Or if you're using a specific data-testid, you can use:\n\n```typescript\nawait userEvent.selectOptions(screen.getByTestId('package-type-select'), \"Document Package Type 2\");\n```\n\n3. If you're using a label, you can try:\n\n```typescript\nawait userEvent.selectOptions(screen.getByLabelText(/type/i), \"Document Package Type 2\");\n```\n\n4. You might also need to find the select by its exact value:\n\n```typescript\nawait userEvent.selectOptions(screen.getByDisplayValue(/select type/i), \"Document Package Type 2\");\n```\n\nThe exact solution depends on how your select component is structured in the actual component. You'll need to:\n\n1. Check how the select element is implemented in `CreatePackageGeneric`\n2. Ensure it has the proper accessibility attributes (aria-label, label, etc.)\n3. Use the appropriate query method that matches your component's structure\n\nCould you share the relevant part of the `CreatePackageGeneric` component where the type selection is implemented? That would help provide a more specific solution.\n\nAlso, make sure that the select element is properly rendered and visible when the test runs. You might need to wait for it to be available:\n\n```typescript\nawait screen.findByRole('combobox', { name: /type/i });\n```\n\nbefore trying to interact with it.\n\n    Here are the accessible roles:\n\n      main:\n\n      Name \"Current Page\":\n      <main\n        aria-label=\"Current Page\"\n      />\n\n      --------------------------------------------------\n      heading:\n\n      Name \"Create Package\":\n      <span\n        class=\"tds-text--h1-alt tds-page-title-text line-clamp-2 tds--no_padding\"\n        role=\"heading\"\n        title=\"Create Package\"\n      />\n\n      Name \"General\":\n      <h4\n        class=\"mb-2 tds--no_padding\"\n        role=\"heading\"\n      />\n\n      --------------------------------------------------\n      list:\n\n      Name \"\":\n      <ol\n        class=\"tds-stepper tds-stepper--width-large mb-6\"\n      />\n\n      --------------------------------------------------\n      listitem:\n\n      Name \"General\":\n      <li\n        aria-label=\"General\"\n        class=\"tds-stepper-item tds-stepper-item--current\"\n        id=\"general\"\n      />\n\n      Name \"Documents\":\n      <li\n        aria-label=\"Documents\"\n        class=\"tds-stepper-item tds-stepper-item--incomplete\"\n        id=\"documents\"\n      />\n\n      --------------------------------------------------\n      textbox:\n\n      Name \"package-title\":\n      <input\n        aria-invalid=\"false\"\n        aria-label=\"package-title\"\n        class=\"tds-form-input-text\"\n        id=\"2472ed0b-6c70-4f95-829c-7cbfb59ed152\"\n        name=\"general.title\"\n        required=\"\"\n        value=\"Title 1\"\n      />\n\n      Name \"Description\":\n      <textarea\n        class=\"tds-form-input-textarea\"\n        id=\"8976d655-711e-4512-a318-71773f6e4fe7\"\n        name=\"general.description\"\n        type=\"text\"\n      />\n\n      --------------------------------------------------\n      combobox:\n\n      Name \"Type\":\n      <input\n        aria-controls=\"cd76866a-3898-48ea-9f01-61bf0c0e35f3-listbox\"\n        aria-expanded=\"false\"\n        aria-haspopup=\"listbox\"\n        autocomplete=\"off\"\n        class=\"tds-form-input-dropdown absolute left-0 top-0 w-full h-full -z-10\"\n        disabled=\"\"\n        id=\"cd76866a-3898-48ea-9f01-61bf0c0e35f3\"\n        name=\"general.type\"\n        placeholder=\"Select\"\n        readonly=\"\"\n        role=\"combobox\"\n        tabindex=\"-1\"\n        value=\"2\"\n      />\n\n      --------------------------------------------------\n      button:\n\n      Name \"Next\":\n      <button\n        class=\"tds-btn tds-btn--large tds-btn--primary w-button\"\n        type=\"button\"\n      />\n\n      Name \"Cancel\":\n      <button\n        class=\"tds-btn tds-btn--large tds-btn--secondary w-button ml-3\"\n        type=\"button\"\n      />\n\n      --------------------------------------------------\n      navigation:\n\n      Name \"Breadcrumb\":\n      <nav\n        aria-label=\"Breadcrumb\"\n      />\nBased on the accessible roles output, I can see that the type selection is implemented as a combobox with the name \"Type\". Here's how you should modify your test:\n\n```typescript\n// Instead of\n// await userEvent.selectOption(\"type\", \"Document Package Type 2\");\n\n// Try this\nawait userEvent.click(screen.getByRole('combobox', { name: 'Type' }));\n// If there's a dropdown that appears, you'll need to click the option\nawait userEvent.click(screen.getByText('Document Package Type 2'));\n```\n\nOr if you're using TDS (Tesla Design System) components, you might need to:\n\n```typescript\nconst typeInput = screen.getByRole('combobox', { name: 'Type' });\nawait userEvent.click(typeInput);\nawait userEvent.click(screen.getByText('Document Package Type 2'));\n```\n\nIf the dropdown options are rendered in a portal or modal, you might need to add a container query:\n\n```typescript\nconst typeInput = screen.getByRole('combobox', { name: 'Type' });\nawait userEvent.click(typeInput);\nawait userEvent.click(screen.getByText('Document Package Type 2', { selector: '.tds-dropdown-option' }));\n```\n\nAlso, I notice the input is disabled (`disabled=\"\"`) in your roles output. You might need to ensure the input is enabled before trying to interact with it. You might need to trigger whatever action enables the input first.\n\nTry one of these approaches and let me know if you still have issues. If you do, it would be helpful to see the implementation of the type selection component in `CreatePackageGeneric`.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":158}}},{"id":{"replica_id":0,"value":33},"start":8031,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":159}}},{"id":{"replica_id":0,"value":34},"start":9792,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":160}}},{"id":{"replica_id":0,"value":95},"start":12440,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":161}}},{"id":{"replica_id":0,"value":96},"start":13928,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":162}}}],"summary":"React Document Package Creation Tests","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":7844},"icon":"File","label":"atom-web/src/browser/features/documents/create-package/create-package-generic.test.tsx","metadata":{"path":"atom-web/src/browser/features/documents/create-package/create-package-generic.test.tsx"}}],"thought_process_output_sections":[]}