{"id":"9d7b0739-caae-49f9-a2d9-a08999b4e4a0","zed":"context","version":"0.4.0","text":"\n\n\n```tsx atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx\nimport { User } from \"@atom/types\";\nimport { FormLayout, PageTitle } from \"@tesla/design-system-react\";\nimport { Input } from \"@tesla/informed-tds\";\nimport differenceBy from \"lodash/differenceBy\";\nimport React from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { z } from \"zod\";\nimport { BackButton } from \"~/components/shared/ui/BackButton\";\nimport { TypedForm } from \"~/components/shared/ui/form/form\";\nimport { FormFooter } from \"~/components/shared/ui/form/form-footer\";\nimport { Page } from \"~/components/shared/ui/page\";\nimport { toast } from \"~/components/shared/ui/toast\";\nimport { useCreateTeamMutation } from \"../queries\";\nimport { InputSupplierUsers } from \"../shared/input-supplier-users\";\nimport { CompanySelect } from \"~/components/shared/ui/informed-inputs/company-select\";\nimport { useFormApi } from \"informed\";\n\nconst schema = z.object({\n  name: z.string(),\n  supplier: z.number(),\n  managers: z.array(User.coreSchema).min(1),\n  members: z.array(User.coreSchema),\n});\n\nexport const CreateExternalTeamPage: React.FC = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const locationID = Number(params.locationID);\n  const createTeamMutation = useCreateTeamMutation();\n\n  return (\n    <Page loading={createTeamMutation.isLoading}>\n      <PageTitle text=\"New Team\" top={<BackButton />} />\n\n      <TypedForm\n        schema={schema}\n        onSubmit={(values) => {\n          const members = differenceBy(values.members, values.managers, \"id\").map((user) => ({\n            userID: user.id,\n            isManager: false,\n            areaDisciplines: [],\n          }));\n          const managers = values.managers.map((user) => ({\n            userID: user.id,\n            isManager: true,\n            areaDisciplines: [],\n          }));\n\n          createTeamMutation.mutate(\n            {\n              locationID,\n              name: values.name,\n              members: [...managers, ...members],\n            },\n            {\n              onSuccess: (data) => {\n                toast.success({ header: \"New Team successfully created\" });\n                navigate(`/settings/locations/${locationID}/teams/${data.id}`, { replace: true });\n              },\n            }\n          );\n        }}\n      >\n        <FormLayout className=\"max-w-input\">\n          <Input name=\"name\" label=\"Name\" required />\n          <CompanySelect locationID={locationID} name=\"company\" label=\"Organisation\" required excludeTesla />\n          <InputSupplierUsers locationID={locationID} supplierID={company} name=\"managers\" label=\"Managers\" required />\n          {/* <InputSupplierUsers locationID={locationID} name=\"members\" label=\"Members\" /> */}\n        </FormLayout>\n        <FormFooter submitLabel=\"Submit\" />\n      </TypedForm>\n    </Page>\n  );\n};\n```\n\nhow to a pass selected company to the input supplier users\nTo pass the selected company value to the `InputSupplierUsers` component, you can use the `useFormApi` hook from `informed` to get the current form values. Here's how you can modify your code:\n\n```tsx\nimport { useFormApi } from \"informed\";\n\nexport const CreateExternalTeamPage: React.FC = () => {\n  const formApi = useFormApi();\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const locationID = Number(params.locationID);\n  const createTeamMutation = useCreateTeamMutation();\n\n  // Get the selected company value\n  const selectedCompany = formApi?.getValue('company');\n\n  return (\n    <Page loading={createTeamMutation.isLoading}>\n      <PageTitle text=\"New Team\" top={<BackButton />} />\n\n      <TypedForm\n        schema={schema}\n        onSubmit={(values) => {\n          // ... rest of your submit logic\n        }}\n      >\n        <FormLayout className=\"max-w-input\">\n          <Input name=\"name\" label=\"Name\" required />\n          <CompanySelect locationID={locationID} name=\"company\" label=\"Organisation\" required excludeTesla />\n          <InputSupplierUsers \n            locationID={locationID} \n            supplierID={selectedCompany} \n            name=\"managers\" \n            label=\"Managers\" \n            required \n          />\n          {/* <InputSupplierUsers locationID={locationID} name=\"members\" label=\"Members\" /> */}\n        </FormLayout>\n        <FormFooter submitLabel=\"Submit\" />\n      </TypedForm>\n    </Page>\n  );\n};\n```\n\nHowever, since `useFormApi` needs to be used within a form context, you'll need to move the part that uses the form values into a separate component:\n\n```tsx\nconst TeamForm: React.FC = () => {\n  const formApi = useFormApi();\n  const selectedCompany = formApi.getValue('company');\n  const params = useParams();\n  const locationID = Number(params.locationID);\n\n  return (\n    <FormLayout className=\"max-w-input\">\n      <Input name=\"name\" label=\"Name\" required />\n      <CompanySelect locationID={locationID} name=\"company\" label=\"Organisation\" required excludeTesla />\n      <InputSupplierUsers \n        locationID={locationID} \n        supplierID={selectedCompany} \n        name=\"managers\" \n        label=\"Managers\" \n        required \n      />\n      {/* <InputSupplierUsers locationID={locationID} name=\"members\" label=\"Members\" /> */}\n    </FormLayout>\n  );\n};\n\nexport const CreateExternalTeamPage: React.FC = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const locationID = Number(params.locationID);\n  const createTeamMutation = useCreateTeamMutation();\n\n  return (\n    <Page loading={createTeamMutation.isLoading}>\n      <PageTitle text=\"New Team\" top={<BackButton />} />\n\n      <TypedForm\n        schema={schema}\n        onSubmit={(values) => {\n          // ... submit logic\n        }}\n      >\n        <TeamForm />\n        <FormFooter submitLabel=\"Submit\" />\n      </TypedForm>\n    </Page>\n  );\n};\n```\n\nThis way, the `useFormApi` hook is used within the form context, and you can properly access the selected company value and pass it to the `InputSupplierUsers` component.\ngetting this error: formApi.getValue is not a function\n\nTo fix this error, you can try one of these approaches:\n\n1. Using `informed`'s `useFieldValue` hook:\n\n```tsx\nimport { useFieldValue } from 'informed';\n\nconst TeamForm: React.FC = () => {\n  const selectedCompany = useFieldValue('company');\n  const params = useParams();\n  const locationID = Number(params.locationID);\n\n  return (\n    <FormLayout className=\"max-w-input\">\n      <Input name=\"name\" label=\"Name\" required />\n      <CompanySelect locationID={locationID} name=\"company\" label=\"Organisation\" required excludeTesla />\n      <InputSupplierUsers \n        locationID={locationID} \n        supplierID={selectedCompany} \n        name=\"managers\" \n        label=\"Managers\" \n        required \n      />\n    </FormLayout>\n  );\n};\n```\n\n2. Or using `useFormState`:\n\n```tsx\nimport { useFormState } from 'informed';\n\nconst TeamForm: React.FC = () => {\n  const formState = useFormState();\n  const selectedCompany = formState.values?.company;\n  const params = useParams();\n  const locationID = Number(params.locationID);\n\n  return (\n    <FormLayout className=\"max-w-input\">\n      <Input name=\"name\" label=\"Name\" required />\n      <CompanySelect locationID={locationID} name=\"company\" label=\"Organisation\" required excludeTesla />\n      <InputSupplierUsers \n        locationID={locationID} \n        supplierID={selectedCompany} \n        name=\"managers\" \n        label=\"Managers\" \n        required \n      />\n    </FormLayout>\n  );\n};\n```\n\nBoth approaches should work to get the selected company value from the form. Choose the one that best fits your needs and the version of `informed` you're using.\n\nThe rest of your component structure remains the same:\n\n```tsx\nexport const CreateExternalTeamPage: React.FC = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const locationID = Number(params.locationID);\n  const createTeamMutation = useCreateTeamMutation();\n\n  return (\n    <Page loading={createTeamMutation.isLoading}>\n      <PageTitle text=\"New Team\" top={<BackButton />} />\n\n      <TypedForm\n        schema={schema}\n        onSubmit={(values) => {\n          // ... submit logic\n        }}\n      >\n        <TeamForm />\n        <FormFooter submitLabel=\"Submit\" />\n      </TypedForm>\n    </Page>\n  );\n};\n```\nfor the formstate, o u need ot use the hok inside the hook? as of now its logging undefined\n```tsx atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx\nimport { User } from \"@atom/types\";\nimport { FormLayout, PageTitle } from \"@tesla/design-system-react\";\nimport { Input } from \"@tesla/informed-tds\";\nimport differenceBy from \"lodash/differenceBy\";\nimport React from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { z } from \"zod\";\nimport { BackButton } from \"~/components/shared/ui/BackButton\";\nimport { TypedForm } from \"~/components/shared/ui/form/form\";\nimport { FormFooter } from \"~/components/shared/ui/form/form-footer\";\nimport { Page } from \"~/components/shared/ui/page\";\nimport { toast } from \"~/components/shared/ui/toast\";\nimport { useCreateTeamMutation } from \"../queries\";\nimport { InputSupplierUsers } from \"../shared/input-supplier-users\";\nimport { CompanySelect } from \"~/components/shared/ui/informed-inputs/company-select\";\nimport { useFormState } from \"informed\";\n\nconst schema = z.object({\n  name: z.string(),\n  company: z.number(),\n  managers: z.array(User.coreSchema).min(1),\n  members: z.array(User.coreSchema),\n});\n\nexport const CreateExternalTeamPage: React.FC = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const formState = useFormState();\n  const createTeamMutation = useCreateTeamMutation();\n\n  const locationID = Number(params.locationID);\n  const selectedCompany = formState.values.company as number;\n\n  console.log({ selectedCompany });\n\n  return (\n    <Page loading={createTeamMutation.isLoading}>\n      <PageTitle text=\"New Team\" top={<BackButton />} />\n\n      <TypedForm\n        schema={schema}\n        onSubmit={(values) => {\n          const members = differenceBy(values.members, values.managers, \"id\").map((user) => ({\n            userID: user.id,\n            isManager: false,\n            areaDisciplines: [],\n          }));\n          const managers = values.managers.map((user) => ({\n            userID: user.id,\n            isManager: true,\n            areaDisciplines: [],\n          }));\n\n          createTeamMutation.mutate(\n            {\n              locationID,\n              name: values.name,\n              members: [...managers, ...members],\n            },\n            {\n              onSuccess: (data) => {\n                toast.success({ header: \"New Team successfully created\" });\n                navigate(`/settings/locations/${locationID}/teams/${data.id}`, { replace: true });\n              },\n            }\n          );\n        }}\n      >\n        <FormLayout className=\"max-w-input\">\n          <Input name=\"name\" label=\"Name\" required />\n          <CompanySelect locationID={locationID} name=\"company\" label=\"Organisation\" required excludeTesla />\n          <InputSupplierUsers\n            locationID={locationID}\n            supplierID={selectedCompany}\n            name=\"managers\"\n            label=\"Managers\"\n            required\n          />\n          {/* <InputSupplierUsers locationID={locationID} name=\"members\" label=\"Members\" /> */}\n        </FormLayout>\n        <FormFooter submitLabel=\"Submit\" />\n      </TypedForm>\n    </Page>\n  );\n};\n```\n\n\nYes, the `useFormState` hook needs to be used inside a component that's wrapped by the form context. Let's create a separate component for the form fields:\n\n```tsx\nconst TeamFormFields: React.FC = () => {\n  const formState = useFormState();\n  const params = useParams();\n  const locationID = Number(params.locationID);\n  const selectedCompany = formState.values?.company as number;\n\n  console.log({ selectedCompany });\n\n  return (\n    <FormLayout className=\"max-w-input\">\n      <Input name=\"name\" label=\"Name\" required />\n      <CompanySelect locationID={locationID} name=\"company\" label=\"Organisation\" required excludeTesla />\n      <InputSupplierUsers\n        locationID={locationID}\n        supplierID={selectedCompany}\n        name=\"managers\"\n        label=\"Managers\"\n        required\n      />\n      {/* <InputSupplierUsers locationID={locationID} name=\"members\" label=\"Members\" /> */}\n    </FormLayout>\n  );\n};\n\nexport const CreateExternalTeamPage: React.FC = () => {\n  const params = useParams();\n  const navigate = useNavigate();\n  const createTeamMutation = useCreateTeamMutation();\n\n  const locationID = Number(params.locationID);\n\n  return (\n    <Page loading={createTeamMutation.isLoading}>\n      <PageTitle text=\"New Team\" top={<BackButton />} />\n\n      <TypedForm\n        schema={schema}\n        onSubmit={(values) => {\n          // ... submit logic\n        }}\n      >\n        <TeamFormFields />\n        <FormFooter submitLabel=\"Submit\" />\n      </TypedForm>\n    </Page>\n  );\n};\n```\n\nBy moving the form fields and the `useFormState` hook into a separate component (`TeamFormFields`), the hook will have access to the form context and should properly get the form values.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":275}}},{"id":{"replica_id":0,"value":16},"start":2976,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":276}}},{"id":{"replica_id":0,"value":17},"start":6045,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":277}}},{"id":{"replica_id":0,"value":103},"start":6101,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":278}}},{"id":{"replica_id":0,"value":104},"start":8328,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":279}}},{"id":{"replica_id":0,"value":230},"start":11549,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":280}}},{"id":{"replica_id":0,"value":231},"start":13233,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":281}}}],"summary":"Use the CompanySelect value by accessing it through the form API. You can use the `useFormApi` hook from `informed` to get the selected company value:","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":2916},"icon":"File","label":"atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx","metadata":{"path":"atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx"}},{"range":{"start":8420,"end":11547},"icon":"File","label":"atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx","metadata":{"path":"atom-web/src/browser/components/settings/locations/location/teams/create-team/create-external-team.page.tsx"}}],"thought_process_output_sections":[]}