{"id":"e4dfc72d-3de2-4987-8fd9-f00d5975e552","zed":"context","version":"0.4.0","text":"\n\nhey \n\n\n\nHow can I help you today?\n\n\n\nimport { User } from \"@atom/types\";\nimport { Prisma } from \"@prisma/client\";\n\nconst Role = User.UserRoleType;\n\nimport { AbilityBuilder } from \"@casl/ability\";\nimport { PermissionConditionFields } from \"../../types\";\nimport { AppAbility } from \"./abilities\";\nimport { conditionsMap } from \"./conditions\";\n\ntype DefinePermissions = (conditions: PermissionConditionFields, builder: AbilityBuilder<AppAbility>) => void;\n\n// Used to group many conditions into one\ntype DefinePermissionCompact = (\n  conditions: { scopeIDs?: number[]; locationIDs?: number[]; userID?: number },\n  builder: AbilityBuilder<AppAbility>\n) => void;\n\nexport const rolePermissions: Record<\n  Exclude<User.UserRoleType, User.UserRoleType.ExternalScopeReader>,\n  DefinePermissions\n> & { [User.UserRoleType.ExternalScopeReader]: DefinePermissionCompact } = {\n  [Role.Basic]: (conditions, { can }) => {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can(\"read\", \"document\", conditionsMap.document(conditions));\n    can(\"read\", \"document_revision\", conditionsMap.document_revision(conditions));\n    can(\"read\", \"document_package\", conditionsMap.document_package(conditions));\n\n    can(\"read\", \"scope\", conditionsMap.scope(conditions));\n    can(\"read\", \"project\", conditionsMap.project(conditions));\n    can(\"read\", \"saving\", conditionsMap.saving(conditions));\n    can(\"read\", \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n\n  [Role.CostViewer]: (conditions, { can }) => {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can(\"read\", \"cost_project\", conditionsMap.cost_project(conditions));\n    can(\"read\", \"cost_sub_project\", conditionsMap.cost_sub_project(conditions));\n    can(\"read\", \"cost_estimate\", conditionsMap.cost_estimate(conditions));\n    can(\"read\", \"funding_request\", conditionsMap.funding_request(conditions));\n    can(\"read\", \"asset\", conditionsMap.asset(conditions));\n    can(\"read\", \"labor_rate\", conditionsMap.labor_rate(conditions));\n    can(\"read\", \"scope\", conditionsMap.scope(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n\n  [Role.CostEstimator]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can(\"manage\", \"cost_project\", conditionsMap.cost_project(conditions));\n    can(\"manage\", \"cost_sub_project\", conditionsMap.cost_sub_project(conditions));\n    can(\"manage\", \"cost_estimate\", conditionsMap.cost_estimate(conditions));\n    can([\"create\", \"read\", \"update\", \"delete\"], \"funding_request\", conditionsMap.funding_request(conditions));\n    can(\"read\", \"scope\", conditionsMap.scope(conditions));\n    can(\"manage\", \"asset\", conditionsMap.asset(conditions));\n    can(\"manage\", \"labor_rate\", conditionsMap.labor_rate(conditions));\n    can(\"read\", \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.BudgetReviewer]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can(\"read\", \"scope\", conditionsMap.scope(conditions));\n    can(\"read\", \"cost_project\", conditionsMap.cost_project(conditions));\n    can(\"read\", \"cost_sub_project\", conditionsMap.cost_sub_project(conditions));\n    can(\"read\", \"cost_estimate\", conditionsMap.cost_estimate(conditions));\n    can([\"read\", \"update\"], \"funding_request\", conditionsMap.funding_request(conditions));\n    can(\"read\", \"asset\", conditionsMap.asset(conditions));\n    can(\"read\", \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.BudgetApprover]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can(\"read\", \"cost_project\", conditionsMap.cost_project(conditions));\n    can(\"read\", \"cost_sub_project\", conditionsMap.cost_sub_project(conditions));\n    can(\"read\", \"cost_estimate\", conditionsMap.cost_estimate(conditions));\n    can([\"read\", \"update\"], \"funding_request\", conditionsMap.funding_request(conditions));\n    can([\"read\", \"update\"], \"scope\", conditionsMap.scope(conditions));\n    can(\"read\", \"asset\", conditionsMap.asset(conditions));\n    can(\"read\", \"labor_rate\", conditionsMap.labor_rate(conditions));\n    can([\"read\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.BudgetManager]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can([\"read\", \"update\"], \"scope\", conditionsMap.scope(conditions));\n    can(\"read\", \"cost_project\", conditionsMap.cost_project(conditions));\n    can(\"read\", \"cost_sub_project\", conditionsMap.cost_sub_project(conditions));\n    can(\"read\", \"cost_estimate\", conditionsMap.cost_estimate(conditions));\n    can([\"read\", \"update\"], \"funding_request\", conditionsMap.funding_request(conditions));\n    can(\"read\", \"asset\", conditionsMap.asset(conditions));\n    can(\"read\", \"labor_rate\", conditionsMap.labor_rate(conditions));\n    can([\"read\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.ConstructionManager]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can([\"read\", \"create\", \"update\"], \"scope\", conditionsMap.scope(conditions));\n\n    can([\"read\", \"create\", \"update\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\"], \"document_package\", conditionsMap.document_package(conditions));\n\n    can(\"read\", \"project\", conditionsMap.project(conditions));\n    can([\"read\", \"create\"], \"saving\", conditionsMap.saving(conditions));\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can(\"read\", \"request_type\", conditionsMap.request_type(conditions));\n    can([\"read\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.TeamAdmin]: function (conditions, { can }) {\n    can(\"manage\", \"team\", conditionsMap.team(conditions));\n\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can([\"read\", \"create\", \"update\"], \"scope\", conditionsMap.scope(conditions));\n\n    can([\"read\", \"create\", \"update\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\"], \"document_package\", conditionsMap.document_package(conditions));\n\n    can(\"read\", \"project\", conditionsMap.project(conditions));\n    can([\"read\", \"create\"], \"saving\", conditionsMap.saving(conditions));\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can(\"read\", \"request_type\", conditionsMap.request_type(conditions));\n    can([\"read\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.Admin]: function (_conditions, { can }) {\n    can(\"manage\", \"all\");\n  },\n  [Role.DesignManager]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can([\"read\", \"create\", \"update\"], \"scope\", conditionsMap.scope(conditions));\n\n    can([\"read\", \"create\", \"update\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\"], \"document_package\", conditionsMap.document_package(conditions));\n\n    can(\"read\", \"project\", conditionsMap.project(conditions));\n    can([\"read\", \"create\"], \"saving\", conditionsMap.saving(conditions));\n    can([\"read\", \"create\"], \"asset\", conditionsMap.asset(conditions));\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can(\"read\", \"request_type\", conditionsMap.request_type(conditions));\n    can([\"read\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.ProjectManager]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can([\"read\", \"create\", \"update\"], \"scope\", conditionsMap.scope(conditions));\n    can([\"read\", \"create\", \"update\"], \"project\", conditionsMap.project(conditions));\n    can([\"read\", \"create\"], \"saving\", conditionsMap.saving(conditions));\n    can([\"read\", \"create\"], \"asset\", conditionsMap.asset(conditions));\n\n    can([\"read\", \"create\", \"update\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\", \"update\"], \"document_package\", conditionsMap.document_package(conditions));\n\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can(\"read\", \"request_type\", conditionsMap.request_type(conditions));\n    can([\"read\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.ProjectControl]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can([\"read\", \"create\", \"update\"], \"scope\", conditionsMap.scope(conditions));\n\n    can([\"read\", \"create\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\"], \"document_package\", conditionsMap.document_package(conditions));\n\n    can(\"manage\", \"project\", conditionsMap.project(conditions));\n    can([\"read\", \"create\"], \"saving\", conditionsMap.saving(conditions));\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can(\"read\", \"request_type\", conditionsMap.request_type(conditions));\n    can([\"read\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.Procurement]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can([\"read\", \"create\", \"update\", \"release\"], \"scope\", conditionsMap.scope(conditions));\n    can(\"manage\", \"scope_purchase_order\", conditionsMap.scope_purchase_order(conditions));\n\n    can([\"read\", \"create\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\"], \"document_package\", conditionsMap.document_package(conditions));\n\n    can([\"read\", \"create\", \"update\"], \"project\", conditionsMap.project(conditions));\n    can([\"read\", \"create\"], \"saving\", conditionsMap.saving(conditions));\n    can([\"read\", \"create\"], \"asset\", conditionsMap.asset(conditions));\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can(\"read\", \"request_type\", conditionsMap.request_type(conditions));\n    can([\"read\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.LocationAdmin]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n    can(\"manage\", \"cost_estimate\", conditionsMap.cost_estimate(conditions));\n    can(\"manage\", \"area\", conditionsMap.area(conditions));\n    can(\"manage\", \"funding_request\", conditionsMap.funding_request(conditions));\n    can(\"manage\", \"cost_sub_project\", conditionsMap.cost_sub_project(conditions));\n    can(\"manage\", \"cost_project\", conditionsMap.cost_project(conditions));\n    can(\"manage\", \"location\", conditionsMap.location(conditions));\n    can(\"manage\", \"indirect_cost\", conditionsMap.indirect_cost(conditions));\n    can(\"manage\", \"cost_scope\", conditionsMap.cost_scope(conditions));\n    can(\"manage\", \"cost_line_item\", conditionsMap.cost_line_item(conditions));\n    can(\"manage\", \"scope\", conditionsMap.scope(conditions));\n    can(\"manage\", \"scope_purchase_order\", conditionsMap.scope_purchase_order(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can(\"manage\", \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\", \"update\"], \"document_package\", conditionsMap.document_package(conditions));\n    can(\"manage\", \"asset\", conditionsMap.asset(conditions));\n    can(\"manage\", \"labor_rate\", conditionsMap.labor_rate(conditions));\n    can(\"manage\", \"project\", conditionsMap.project(conditions));\n    can(\"manage\", \"saving\", conditionsMap.saving(conditions));\n    can(\"manage\", \"request_type\", conditionsMap.request_type(conditions));\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can(\"manage\", \"issue\", conditionsMap.issue(conditions));\n    can(\"manage\", \"location_settings\", { location_id: conditions.location_id });\n    can(\"manage\", \"supplier\");\n    can(\"manage\", \"user\");\n    can(\"manage\", \"area_type\");\n    can(\"manage\", \"csi_cost_element\");\n    can(\"manage\", \"l360_currency\");\n    can(\"manage\", \"discipline\");\n    can(\"manage\", \"indirect_cost_type\");\n    can(\"manage\", \"l360_location\");\n    can(\"manage\", \"location_type\");\n    can(\"manage\", \"permission\");\n    can(\"manage\", \"shift_hours\");\n    can(\"manage\", \"unit_of_measure\");\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n    can(\"manage\", \"team\", conditionsMap.team(conditions));\n  },\n  [Role.DocumentControl]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n\n    can([\"read\", \"create\", \"update\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\", \"update\"], \"document_package\", conditionsMap.document_package(conditions));\n\n    can(\"manage\", \"area\", conditionsMap.area(conditions));\n    can(\"manage\", \"location\", conditionsMap.location(conditions));\n    can(\"read\", \"project\", conditionsMap.project(conditions));\n    can([\"read\", \"update\"], \"scope\", conditionsMap.scope(conditions));\n    can(\"manage\", \"request_type\", conditionsMap.request_type(conditions));\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can([\"read\", \"update\"], \"issue\", conditionsMap.issue(conditions));\n\n    can(\"manage\", \"location_settings\");\n    can(\"read\", \"user\");\n    can(\"manage\", \"supplier\");\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.Supplier]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n    can(\"read\", \"request_type\", {\n      is_external: true,\n      location_id: conditions.location_id,\n    });\n  },\n  [Role.ExternalScopeReader]: function (\n    conditions: { scopeIDs?: number[]; locationIDs?: number[]; userID?: number },\n    { can }\n  ) {\n    const scopeDocumentRevisionCondition = {\n      scope_document_revision: {\n        some: {\n          scope_id: { in: conditions.scopeIDs },\n          is_released: true,\n        },\n      },\n    };\n    const requestDocumentRevisionCondition = {\n      request_document_revision: {\n        some: {\n          request: {\n            request_form_value: {\n              some: {\n                request_type_form_field: {\n                  request_type_form_field_type: {\n                    is_common: true,\n                  },\n                },\n                scope_id: { in: conditions.scopeIDs },\n              },\n            },\n          },\n          is_released: true,\n        },\n      },\n    };\n\n    const docRevisionCondition: Prisma.document_revisionWhereInput = {\n      OR: [\n        {\n          created_by: conditions.userID,\n        },\n        scopeDocumentRevisionCondition,\n        requestDocumentRevisionCondition,\n      ],\n    };\n\n    const docCreateCondition = {\n      OR: [\n        {\n          scope_document_revision: {\n            some: {\n              scope_id: { in: conditions.scopeIDs },\n            },\n          },\n        },\n        {\n          request_document_revision: {\n            some: {\n              request: {\n                request_form_value: {\n                  some: {\n                    request_type_form_field: {\n                      request_type_form_field_type: {\n                        is_common: true,\n                      },\n                    },\n                    scope_id: { in: conditions.scopeIDs },\n                  },\n                },\n              },\n            },\n          },\n        },\n      ],\n    };\n\n    const docPackageReadCondition: Prisma.document_packageWhereInput = {\n      OR: [\n        { created_by: conditions.userID },\n        {\n          document_package_document: {\n            some: {\n              document: { document_revision: { some: { ...scopeDocumentRevisionCondition } } },\n            },\n          },\n        },\n        {\n          document_package_document: {\n            some: {\n              document: { document_revision: { some: { ...requestDocumentRevisionCondition } } },\n            },\n          },\n        },\n      ],\n    };\n\n    const docPackageCreateCondition: Prisma.document_packageWhereInput = {\n      OR: [\n        {\n          document_package_document: {\n            some: {\n              document: {\n                document_revision: {\n                  some: {\n                    scope_document_revision: {\n                      some: {\n                        scope_id: { in: conditions.scopeIDs },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        {\n          document_package_document: {\n            some: {\n              document: {\n                document_revision: {\n                  some: {\n                    request_document_revision: {\n                      some: {\n                        request: {\n                          request_form_value: {\n                            some: {\n                              request_type_form_field: {\n                                request_type_form_field_type: {\n                                  is_common: true,\n                                },\n                              },\n                              scope_id: { in: conditions.scopeIDs },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      ],\n    };\n\n    const readUpdateRequestCondition: Prisma.requestWhereInput = {\n      OR: [\n        {\n          created_by: conditions.userID,\n          request_form_value: {\n            some: {\n              scope_id: { in: conditions.scopeIDs },\n              request_type_form_field: {\n                request_type_form_field_type: {\n                  is_common: true,\n                },\n              },\n            },\n          },\n        },\n        // Supplier is a recipient of request in the released to them scope\n        {\n          request_form_value: {\n            some: {\n              scope_id: { in: conditions.scopeIDs },\n              request_type_form_field: {\n                request_type_form_field_type: {\n                  is_common: true,\n                },\n              },\n            },\n          },\n\n          active_recipient: {\n            contains: \"scope_supplier\",\n          },\n\n          request_recipient: {\n            some: {\n              user_id: conditions.userID,\n            },\n          },\n        },\n      ],\n    };\n\n    can(\"read\", \"scope\", {\n      scope_id: { in: conditions.scopeIDs },\n    });\n    can(\"read\", \"issue\", {\n      scope_id: { in: conditions.scopeIDs },\n    });\n\n    can(\"read\", \"document_revision\", docRevisionCondition);\n    can(\"read\", \"document\", {\n      document_revision: {\n        some: docRevisionCondition,\n      },\n    });\n    can(\"read\", \"document_package\", {\n      ...docPackageReadCondition,\n    });\n\n    can(\"create\", \"document_revision\", docCreateCondition);\n    can(\"update\", \"document_revision\", {\n      ...docRevisionCondition,\n    });\n    can(\"create\", \"document\", {\n      document_revision: {\n        some: docCreateCondition,\n      },\n    });\n\n    can(\"create\", \"document_package\", {\n      ...docPackageCreateCondition,\n    });\n\n    can([\"read\", \"update\"], \"request\", readUpdateRequestCondition);\n\n    can(\"create\", \"request\", {\n      request_form_value: {\n        some: {\n          request_type_form_field: {\n            request_type_form_field_type: {\n              is_common: true,\n            },\n          },\n          scope_id: { in: conditions.scopeIDs },\n        },\n      },\n    });\n\n    can([\"read\", \"create\"], \"comment\", {\n      visible_to_external: true,\n      OR: [\n        {\n          scope_id: { in: conditions.scopeIDs },\n        },\n        {\n          issue: {\n            scope_id: { in: conditions.scopeIDs },\n          },\n        },\n        {\n          request: readUpdateRequestCondition,\n        },\n      ],\n    });\n  },\n  [Role.LeadViewer]: function (conditions, { can }) {\n    can(\"read\", \"lead\", { location_id: conditions.location_id });\n  },\n  [Role.LeadEditor]: function (conditions, { can }) {\n    can([\"read\", \"create\", \"update\", \"delete\"], \"lead\", { location_id: conditions.location_id });\n  },\n  [Role.LeadApprover]: function (conditions, { can }) {\n    can([\"read\", \"create\", \"update\", \"review\"], \"lead\", { location_id: conditions.location_id });\n  },\n  [Role.Requestor]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"request_type\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n    can(\"create\", \"request\", conditionsMap.request(conditions));\n\n    can([\"read\", \"update\"], \"request\", {\n      OR: [\n        {\n          created_by: conditions.user_id,\n        },\n        {\n          request_recipient: {\n            some: {\n              user_id: conditions.user_id,\n            },\n          },\n        },\n      ],\n    });\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n  [Role.QualityManager]: function (conditions, { can }) {\n    can(\"read\", [\"location\", \"settings\", \"location_settings\", \"supplier\", \"team\"], {\n      location_id: conditions.location_id,\n    });\n    can(\"read\", \"scope\", conditionsMap.scope(conditions));\n\n    can([\"read\", \"create\", \"update\", \"review\"], \"document\", conditionsMap.document(conditions));\n    can([\"read\", \"create\", \"update\", \"review\"], \"document_revision\", conditionsMap.document_revision(conditions));\n    can([\"read\", \"create\"], \"document_package\", conditionsMap.document_package(conditions));\n\n    can(\"read\", \"project\", conditionsMap.project(conditions));\n    can(\"read\", \"saving\", conditionsMap.saving(conditions));\n    can(\"read\", \"asset\", conditionsMap.asset(conditions));\n    can(\"manage\", \"request\", conditionsMap.request(conditions));\n    can(\"read\", \"request_type\", conditionsMap.request_type(conditions));\n    can([\"read\", \"update\", \"create\"], \"issue\", conditionsMap.issue(conditions));\n    can([\"read\", \"create\"], \"comment\", conditionsMap.comment(conditions));\n  },\n};\n\n\ncan you explain me the above code\n and what it does? \n\nThis code is a part of an application built using the Prisma framework. The application likely deals with construction project management tasks, such as creating requests for materials or equipment and managing budgets.\n\nThe code in question appears to be used to define permissions and roles within the application. Roles are used to assign specific permissions to different users based on their role within the application.\n\nEach Role is an object that contains a description of what the role entails. \n\nFor instance, `Role.CostViewer` defines a user who can view costs associated with projects but cannot create or modify them.\n\nThe code defines an array of Roles and creates abilities for each role by using the `AbilityBuilder`. The AbilityBuilder is used to build abilities that can be attached to users.\n\nIn this specific case, we are creating abilities based on conditions. These conditions include the location ID, scope IDs, user ID, and other related values.\n\nThe Role that includes an external scope reader contains a complex condition. This condition is looking for all documents or requests associated with a user's assigned scopes (where `is_external` is true) as well as those that are released to users who have one of the scope IDs assigned by the current user's role.\n\nThis complexity arises because in this application, certain documents and requests require different levels of access based on their scope, which can change over time. This Role can manage multiple scopes, but also allows for permissions to be managed on an individual document or request level, thus requiring additional conditions to determine if the ability is allowed or not.\n\nThe Role `Role.LeadEditor` gives users edit permissions and reviewability for leads. \n\nThis code appears to follow best practices by separating out permissions into their own roles which are clearly described, providing the ability to customize and manage individual user's permissions easily.\n\n\nLet me know if I'd like me to clarify anything!\n\n\n\n```javascript\nimport { User } from \"@atom/types\";\nimport { Prisma } from \"@prisma/client\";\n\nconst Role = User.UserRoleType;\n\nimport { AbilityBuilder } from \"@casl/ability\";\nimport { PermissionConditionFields } from \"../../types\";\nimport { AppAbility } from \"./abilities\";\nimport { conditionsMap } from \"./conditions\";\n\ntype DefinePermissions = (conditions: PermissionConditionFields, builder: AbilityBuilder<AppAbility>) => void;\n\n// Used to group many conditions into one\ntype DefinePermissionCompact = (\n  conditions: { scopeIDs?: number[]; locationIDs?: number[]; userID?: number },\n  builder: AbilityBuilder<AppAbility>\n) => void;\n\nexport const rolePermissions: Record<\n  Exclude<User.UserRoleType, User.UserRoleType.ExternalScopeReader>,\n  DefinePermissions\n> & { [User.UserRoleType.ExternalScopeReader]: DefinePermissionCompact } = {\n  // ... rest of the code remains the same ...\n\n  [Role.ExternalScopeReader]: function (\n    conditions: { scopeIDs?: number[]; locationIDs?: number[]; userID?: number },\n    { can }\n  ) {\n    const scopeDocumentRevisionCondition = {\n      scope_document_revision: {\n        some: {\n          scope_id: { in: conditions.scopeIDs },\n          is_released: true,\n        },\n      },\n    };\n    const requestDocumentRevisionCondition = {\n      request_document_revision: {\n        some: {\n          request: {\n            request_form_value: {\n              some: {\n                request_type_form_field: {\n                  request_type_form_field_type: {\n                    is_common: true,\n                  },\n                },\n                scope_id: { in: conditions.scopeIDs },\n              },\n            },\n          },\n          is_released: true,\n        },\n      },\n    };\n\n    const docRevisionCondition: Prisma.document_revisionWhereInput = {\n      OR: [\n        {\n          created_by: conditions.userID,\n        },\n        scopeDocumentRevisionCondition,\n        requestDocumentRevisionCondition,\n      ],\n    };\n\n    const docCreateCondition = {\n      OR: [\n        {\n          scope_document_revision: {\n            some: {\n              scope_id: { in: conditions.scopeIDs },\n            },\n          },\n        },\n        {\n          request_document_revision: {\n            some: {\n              request: {\n                request_form_value: {\n                  some: {\n                    request_type_form_field: {\n                      request_type_form_field_type: {\n                        is_common: true,\n                      },\n                    },\n                    scope_id: { in: conditions.scopeIDs },\n                  },\n                },\n              },\n            },\n          },\n        },\n      ],\n    };\n\n    const docPackageReadCondition: Prisma.document_packageWhereInput = {\n      OR: [\n        { created_by: conditions.userID },\n        {\n          document_package_document: {\n            some: {\n              document: { document_revision: { some: { ...scopeDocumentRevisionCondition } } },\n            },\n          },\n        },\n        {\n          document_package_document: {\n            some: {\n              document: { document_revision: { some: { ...requestDocumentRevisionCondition } } },\n            },\n          },\n        },\n      ],\n    };\n\n    const docPackageCreateCondition: Prisma.document_packageWhereInput = {\n      OR: [\n        {\n          document_package_document: {\n            some: {\n              document: {\n                document_revision: {\n                  some: {\n                    scope_document_revision: {\n                      some: {\n                        scope_id: { in: conditions.scopeIDs },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        {\n          document_package_document: {\n            some: {\n              document: {\n                document_revision: {\n                  some: {\n                    request_document_revision: {\n                      some: {\n                        request: {\n                          request_form_value: {\n                            some: {\n                              request_type_form_field: {\n                                request_type_form_field_type: {\n                                  is_common: true,\n                                },\n                              },\n                              scope_id: { in: conditions.scopeIDs },\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      ],\n    };\n\n    const readUpdateRequestCondition: Prisma.requestWhereInput = {\n      OR: [\n        {\n          created_by: conditions.userID,\n          request_form_value: {\n            some: {\n              scope_id: { in: conditions.scopeIDs },\n              request_type_form_field: {\n                request_type_form_field_type: {\n                  is_common: true,\n                },\n              },\n            },\n          },\n        },\n        // Supplier is a recipient of request in the released to them scope\n        {\n          request_form_value: {\n            some: {\n              scope_id: { in: conditions.scopeIDs },\n              request_type_form_field: {\n                request_type_form_field_type: {\n                  is_common: true,\n                },\n              },\n            },\n          },\n\n          active_recipient: {\n            contains: \"scope_supplier\",\n          },\n\n          request_recipient: {\n            some: {\n              user_id: conditions.userID,\n            },\n          },\n        },\n      ],\n    };\n\n    can(\"read\", \"scope\", {\n      scope_id: { in: conditions.scopeIDs },\n    });\n    can(\"read\", \"issue\", {\n      scope_id: { in: conditions.scopeIDs },\n    });\n\n    can(\"read\", \"document_revision\", docRevisionCondition);\n    can(\"read\", \"document\", {\n      document_revision: {\n        some: docRevisionCondition,\n      },\n    });\n    can(\"read\", \"document_package\", {\n      ...docPackageReadCondition,\n    });\n\n    can(\"create\", \"document_revision\", docCreateCondition);\n    can(\"update\", \"document_revision\", {\n      ...docRevisionCondition,\n    });\n    can(\"create\", \"document\", {\n      document_revision: {\n        some: docCreateCondition,\n      },\n    });\n\n    can(\"create\", \"document_package\", {\n      ...docPackageCreateCondition,\n    });\n\n    can([\"read\", \"update\"], \"request\", readUpdateRequestCondition);\n\n    can(\"create\", \"request\", {\n      request_form_value: {\n        some: {\n          request_type_form_field: {\n            request_type_form_field_type: {\n              is_common: true,\n            },\n          },\n          scope_id: { in: conditions.scopeIDs },\n        },\n      },\n    });\n\n    can([\"read\", \"create\"], \"comment\", {\n      visible_to_external: true,\n      OR: [\n        {\n          scope_id: { in: conditions.scopeIDs },\n        },\n        {\n          issue: {\n            scope_id: { in: conditions.scopeIDs },\n          },\n        },\n        {\n         \n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":108}}},{"id":{"replica_id":0,"value":10},"start":10,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":109}}},{"id":{"replica_id":0,"value":101},"start":24588,"metadata":{"role":"assistant","status":"Canceled","timestamp":{"replica_id":0,"value":110}}},{"id":{"replica_id":0,"value":102},"start":33757,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":111}}}],"summary":"Starting Conversation with A Simple Greeting","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null}]}